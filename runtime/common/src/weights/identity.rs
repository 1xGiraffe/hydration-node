// This file is part of HydraDX.

// Copyright (C) 2020-2023  Intergalactic, Limited (GIB).
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_identity
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-16, STEPS: 5, REPEAT: 20, LOW RANGE: [], HIGH RANGE: []
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/hydradx
// benchmark
// pallet
// --pallet=pallet-identity
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --chain=dev
// --extrinsic=*
// --steps=5
// --repeat=20
// --output
// identity.rs
// --template
// .maintain/pallet-weight-template-no-back.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

use pallet_identity::weights::WeightInfo;

/// Weights for pallet_identity using the hydraDX node and recommended hardware.
pub struct HydraWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> WeightInfo for HydraWeight<T> {
	// Storage: Identity Registrars (r:1 w:1)
	// Proof: Identity Registrars (max_values: Some(1), max_size: Some(1141), added: 1636, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 19]`.
    fn add_registrar(r: u32, ) -> Weight {
        // Minimum execution time: 15_326 nanoseconds.
        Weight::from_ref_time(15_582_094 as u64)            // Standard Error: 4_653
            .saturating_add(Weight::from_ref_time(176_404 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
	// Storage: Identity IdentityOf (r:1 w:1)
	// Proof: Identity IdentityOf (max_values: None, max_size: Some(7538), added: 10013, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 20]`.
	/// The range of component `x` is `[0, 100]`.
    fn set_identity(r: u32, x: u32, ) -> Weight {
        // Minimum execution time: 38_131 nanoseconds.
        Weight::from_ref_time(37_398_023 as u64)            // Standard Error: 7_257
            .saturating_add(Weight::from_ref_time(69_908 as u64).saturating_mul(r as u64))
            // Standard Error: 1_408
            .saturating_add(Weight::from_ref_time(531_880 as u64).saturating_mul(x as u64))
            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
	// Storage: Identity IdentityOf (r:1 w:0)
	// Proof: Identity IdentityOf (max_values: None, max_size: Some(7538), added: 10013, mode: MaxEncodedLen)
	// Storage: Identity SubsOf (r:1 w:1)
	// Proof: Identity SubsOf (max_values: None, max_size: Some(3258), added: 5733, mode: MaxEncodedLen)
	// Storage: Identity SuperOf (r:100 w:100)
	// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 100]`.
    fn set_subs_new(s: u32, ) -> Weight {
        // Minimum execution time: 13_176 nanoseconds.
        Weight::from_ref_time(20_572_660 as u64)            // Standard Error: 21_203
            .saturating_add(Weight::from_ref_time(3_483_533 as u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(s as u64)))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
            .saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(s as u64)))
    }
	// Storage: Identity IdentityOf (r:1 w:0)
	// Proof: Identity IdentityOf (max_values: None, max_size: Some(7538), added: 10013, mode: MaxEncodedLen)
	// Storage: Identity SubsOf (r:1 w:1)
	// Proof: Identity SubsOf (max_values: None, max_size: Some(3258), added: 5733, mode: MaxEncodedLen)
	// Storage: Identity SuperOf (r:0 w:100)
	// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	/// The range of component `p` is `[0, 100]`.
    fn set_subs_old(p: u32, ) -> Weight {
        // Minimum execution time: 12_990 nanoseconds.
        Weight::from_ref_time(20_453_420 as u64)            // Standard Error: 21_437
            .saturating_add(Weight::from_ref_time(1_463_947 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
            .saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(p as u64)))
    }
	// Storage: Identity SubsOf (r:1 w:1)
	// Proof: Identity SubsOf (max_values: None, max_size: Some(3258), added: 5733, mode: MaxEncodedLen)
	// Storage: Identity IdentityOf (r:1 w:1)
	// Proof: Identity IdentityOf (max_values: None, max_size: Some(7538), added: 10013, mode: MaxEncodedLen)
	// Storage: Identity SuperOf (r:0 w:100)
	// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 20]`.
	/// The range of component `s` is `[0, 100]`.
	/// The range of component `x` is `[0, 100]`.
    fn clear_identity(r: u32, s: u32, x: u32, ) -> Weight {
        // Minimum execution time: 60_648 nanoseconds.
        Weight::from_ref_time(33_396_832 as u64)            // Standard Error: 15_990
            .saturating_add(Weight::from_ref_time(90_628 as u64).saturating_mul(r as u64))
            // Standard Error: 3_105
            .saturating_add(Weight::from_ref_time(1_358_139 as u64).saturating_mul(s as u64))
            // Standard Error: 3_105
            .saturating_add(Weight::from_ref_time(268_909 as u64).saturating_mul(x as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
            .saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(s as u64)))
    }
	// Storage: Identity Registrars (r:1 w:0)
	// Proof: Identity Registrars (max_values: Some(1), max_size: Some(1141), added: 1636, mode: MaxEncodedLen)
	// Storage: Identity IdentityOf (r:1 w:1)
	// Proof: Identity IdentityOf (max_values: None, max_size: Some(7538), added: 10013, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 20]`.
	/// The range of component `x` is `[0, 100]`.
    fn request_judgement(r: u32, x: u32, ) -> Weight {
        // Minimum execution time: 39_197 nanoseconds.
        Weight::from_ref_time(39_378_606 as u64)            // Standard Error: 10_835
            .saturating_add(Weight::from_ref_time(30_127 as u64).saturating_mul(r as u64))
            // Standard Error: 2_103
            .saturating_add(Weight::from_ref_time(548_234 as u64).saturating_mul(x as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
	// Storage: Identity IdentityOf (r:1 w:1)
	// Proof: Identity IdentityOf (max_values: None, max_size: Some(7538), added: 10013, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 20]`.
	/// The range of component `x` is `[0, 100]`.
    fn cancel_request(r: u32, x: u32, ) -> Weight {
        // Minimum execution time: 35_105 nanoseconds.
        Weight::from_ref_time(35_494_233 as u64)            // Standard Error: 12_119
            .saturating_add(Weight::from_ref_time(23_586 as u64).saturating_mul(r as u64))
            // Standard Error: 2_352
            .saturating_add(Weight::from_ref_time(548_868 as u64).saturating_mul(x as u64))
            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
	// Storage: Identity Registrars (r:1 w:1)
	// Proof: Identity Registrars (max_values: Some(1), max_size: Some(1141), added: 1636, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 19]`.
    fn set_fee(r: u32, ) -> Weight {
        // Minimum execution time: 9_796 nanoseconds.
        Weight::from_ref_time(10_072_944 as u64)            // Standard Error: 2_858
            .saturating_add(Weight::from_ref_time(132_724 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
	// Storage: Identity Registrars (r:1 w:1)
	// Proof: Identity Registrars (max_values: Some(1), max_size: Some(1141), added: 1636, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 19]`.
    fn set_account_id(r: u32, ) -> Weight {
        // Minimum execution time: 11_153 nanoseconds.
        Weight::from_ref_time(11_547_123 as u64)            // Standard Error: 5_182
            .saturating_add(Weight::from_ref_time(98_366 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
	// Storage: Identity Registrars (r:1 w:1)
	// Proof: Identity Registrars (max_values: Some(1), max_size: Some(1141), added: 1636, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 19]`.
    fn set_fields(r: u32, ) -> Weight {
        // Minimum execution time: 10_612 nanoseconds.
        Weight::from_ref_time(11_180_103 as u64)            // Standard Error: 7_860
            .saturating_add(Weight::from_ref_time(118_105 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
	// Storage: Identity Registrars (r:1 w:0)
	// Proof: Identity Registrars (max_values: Some(1), max_size: Some(1141), added: 1636, mode: MaxEncodedLen)
	// Storage: Identity IdentityOf (r:1 w:1)
	// Proof: Identity IdentityOf (max_values: None, max_size: Some(7538), added: 10013, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 19]`.
	/// The range of component `x` is `[0, 100]`.
    fn provide_judgement(r: u32, x: u32, ) -> Weight {
        // Minimum execution time: 30_030 nanoseconds.
        Weight::from_ref_time(28_748_819 as u64)            // Standard Error: 4_117
            .saturating_add(Weight::from_ref_time(102_566 as u64).saturating_mul(r as u64))
            // Standard Error: 749
            .saturating_add(Weight::from_ref_time(889_340 as u64).saturating_mul(x as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
	// Storage: Identity SubsOf (r:1 w:1)
	// Proof: Identity SubsOf (max_values: None, max_size: Some(3258), added: 5733, mode: MaxEncodedLen)
	// Storage: Identity IdentityOf (r:1 w:1)
	// Proof: Identity IdentityOf (max_values: None, max_size: Some(7538), added: 10013, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Identity SuperOf (r:0 w:100)
	// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 20]`.
	/// The range of component `s` is `[0, 100]`.
	/// The range of component `x` is `[0, 100]`.
    fn kill_identity(r: u32, s: u32, x: u32, ) -> Weight {
        // Minimum execution time: 80_698 nanoseconds.
        Weight::from_ref_time(55_614_441 as u64)            // Standard Error: 16_269
            .saturating_add(Weight::from_ref_time(62_642 as u64).saturating_mul(r as u64))
            // Standard Error: 3_159
            .saturating_add(Weight::from_ref_time(1_363_105 as u64).saturating_mul(s as u64))
            // Standard Error: 3_159
            .saturating_add(Weight::from_ref_time(258_243 as u64).saturating_mul(x as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
            .saturating_add(T::DbWeight::get().writes(3 as u64))
            .saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(s as u64)))
    }
	// Storage: Identity IdentityOf (r:1 w:0)
	// Proof: Identity IdentityOf (max_values: None, max_size: Some(7538), added: 10013, mode: MaxEncodedLen)
	// Storage: Identity SuperOf (r:1 w:1)
	// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	// Storage: Identity SubsOf (r:1 w:1)
	// Proof: Identity SubsOf (max_values: None, max_size: Some(3258), added: 5733, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 99]`.
    fn add_sub(s: u32, ) -> Weight {
        // Minimum execution time: 34_765 nanoseconds.
        Weight::from_ref_time(37_717_592 as u64)            // Standard Error: 6_463
            .saturating_add(Weight::from_ref_time(101_957 as u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
            .saturating_add(T::DbWeight::get().writes(2 as u64))
    }
	// Storage: Identity IdentityOf (r:1 w:0)
	// Proof: Identity IdentityOf (max_values: None, max_size: Some(7538), added: 10013, mode: MaxEncodedLen)
	// Storage: Identity SuperOf (r:1 w:1)
	// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	/// The range of component `s` is `[1, 100]`.
    fn rename_sub(s: u32, ) -> Weight {
        // Minimum execution time: 17_138 nanoseconds.
        Weight::from_ref_time(18_541_210 as u64)            // Standard Error: 3_195
            .saturating_add(Weight::from_ref_time(32_533 as u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
	// Storage: Identity IdentityOf (r:1 w:0)
	// Proof: Identity IdentityOf (max_values: None, max_size: Some(7538), added: 10013, mode: MaxEncodedLen)
	// Storage: Identity SuperOf (r:1 w:1)
	// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	// Storage: Identity SubsOf (r:1 w:1)
	// Proof: Identity SubsOf (max_values: None, max_size: Some(3258), added: 5733, mode: MaxEncodedLen)
	/// The range of component `s` is `[1, 100]`.
    fn remove_sub(s: u32, ) -> Weight {
        // Minimum execution time: 39_118 nanoseconds.
        Weight::from_ref_time(41_145_308 as u64)            // Standard Error: 4_681
            .saturating_add(Weight::from_ref_time(65_113 as u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
            .saturating_add(T::DbWeight::get().writes(2 as u64))
    }
	// Storage: Identity SuperOf (r:1 w:1)
	// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	// Storage: Identity SubsOf (r:1 w:1)
	// Proof: Identity SubsOf (max_values: None, max_size: Some(3258), added: 5733, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 99]`.
    fn quit_sub(s: u32, ) -> Weight {
        // Minimum execution time: 25_303 nanoseconds.
        Weight::from_ref_time(27_018_647 as u64)            // Standard Error: 4_565
            .saturating_add(Weight::from_ref_time(75_673 as u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(2 as u64))
    }
}
