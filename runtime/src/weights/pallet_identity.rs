// This file is part of HydraDX-node.

// Copyright (C) 2021 Intergalactic Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_identity
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-04-14, STEPS: [50, ], REPEAT: 20, LOW RANGE: [], HIGH RANGE: []
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// target/release/hydra-dx
// benchmark
// --pallet=pallet_identity
// --chain=dev
// --steps=50
// --repeat=20
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=.maintain/substrate-weight-template.hbs
// --output=tmp/pallet_identity.rs

#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

use pallet_identity::WeightInfo;

/// Weights for pallet_identity using the hydraDX node and recommended hardware.
pub struct HydraWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> WeightInfo for HydraWeight<T> {
    fn add_registrar(r: u32, ) -> Weight {
        (23_644_000 as Weight)
            // Standard Error: 4_000
            .saturating_add((476_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
    }
    fn set_identity(r: u32, x: u32, ) -> Weight {
        (60_195_000 as Weight)
            // Standard Error: 17_000
            .saturating_add((344_000 as Weight).saturating_mul(r as Weight))
            // Standard Error: 2_000
            .saturating_add((1_154_000 as Weight).saturating_mul(x as Weight))
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
    }
    fn set_subs_new(s: u32, ) -> Weight {
        (48_427_000 as Weight)
            // Standard Error: 2_000
            .saturating_add((7_435_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
            .saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(s as Weight)))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
            .saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(s as Weight)))
    }
    fn set_subs_old(p: u32, ) -> Weight {
        (47_730_000 as Weight)
            // Standard Error: 1_000
            .saturating_add((2_574_000 as Weight).saturating_mul(p as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
            .saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(p as Weight)))
    }
    fn clear_identity(r: u32, s: u32, x: u32, ) -> Weight {
        (58_181_000 as Weight)
            // Standard Error: 12_000
            .saturating_add((269_000 as Weight).saturating_mul(r as Weight))
            // Standard Error: 1_000
            .saturating_add((2_540_000 as Weight).saturating_mul(s as Weight))
            // Standard Error: 1_000
            .saturating_add((753_000 as Weight).saturating_mul(x as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
            .saturating_add(T::DbWeight::get().writes(2 as Weight))
            .saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(s as Weight)))
    }
    fn request_judgement(r: u32, x: u32, ) -> Weight {
        (62_393_000 as Weight)
            // Standard Error: 7_000
            .saturating_add((455_000 as Weight).saturating_mul(r as Weight))
            // Standard Error: 1_000
            .saturating_add((1_476_000 as Weight).saturating_mul(x as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
    }
    fn cancel_request(r: u32, x: u32, ) -> Weight {
        (57_626_000 as Weight)
            // Standard Error: 10_000
            .saturating_add((300_000 as Weight).saturating_mul(r as Weight))
            // Standard Error: 1_000
            .saturating_add((1_458_000 as Weight).saturating_mul(x as Weight))
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
    }
    fn set_fee(r: u32, ) -> Weight {
        (9_017_000 as Weight)
            // Standard Error: 2_000
            .saturating_add((421_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
    }
    fn set_account_id(r: u32, ) -> Weight {
        (10_078_000 as Weight)
            // Standard Error: 1_000
            .saturating_add((432_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
    }
    fn set_fields(r: u32, ) -> Weight {
        (8_934_000 as Weight)
            // Standard Error: 2_000
            .saturating_add((434_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
    }
    fn provide_judgement(r: u32, x: u32, ) -> Weight {
        (40_307_000 as Weight)
            // Standard Error: 8_000
            .saturating_add((422_000 as Weight).saturating_mul(r as Weight))
            // Standard Error: 1_000
            .saturating_add((1_459_000 as Weight).saturating_mul(x as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
    }
    fn kill_identity(r: u32, s: u32, _x: u32, ) -> Weight {
        (80_582_000 as Weight)
            // Standard Error: 11_000
            .saturating_add((165_000 as Weight).saturating_mul(r as Weight))
            // Standard Error: 1_000
            .saturating_add((2_539_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(T::DbWeight::get().reads(4 as Weight))
            .saturating_add(T::DbWeight::get().writes(4 as Weight))
            .saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(s as Weight)))
    }
    fn add_sub(s: u32, ) -> Weight {
        (62_621_000 as Weight)
            // Standard Error: 1_000
            .saturating_add((291_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
            .saturating_add(T::DbWeight::get().writes(2 as Weight))
    }
    fn rename_sub(s: u32, ) -> Weight {
        (19_934_000 as Weight)
            // Standard Error: 0
            .saturating_add((85_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
    }
    fn remove_sub(s: u32, ) -> Weight {
        (64_096_000 as Weight)
            // Standard Error: 1_000
            .saturating_add((267_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
            .saturating_add(T::DbWeight::get().writes(2 as Weight))
    }
    fn quit_sub(s: u32, ) -> Weight {
        (39_297_000 as Weight)
            // Standard Error: 0
            .saturating_add((259_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
            .saturating_add(T::DbWeight::get().writes(2 as Weight))
    }
}