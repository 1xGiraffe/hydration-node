// This file is part of HydraDX.

// Copyright (C) 2020-2023  Intergalactic, Limited (GIB).
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for council
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-05, STEPS: 5, REPEAT: 20, LOW RANGE: [], HIGH RANGE: []
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/hydradx
// benchmark
// pallet
// --pallet=council
// --chain=dev
// --extrinsic=*
// --steps=5
// --repeat=20
// --output
// council.rs
// --template
// .maintain/pallet-weight-template-no-back.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{
	traits::Get,
	weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

use pallet_collective::weights::WeightInfo;

/// Weights for council using the hydraDX node and recommended hardware.
pub struct HydraWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> WeightInfo for HydraWeight<T> {
	// Storage: Council Members (r:1 w:1)
	// Proof Skipped: Council Members (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Council Proposals (r:1 w:0)
	// Proof Skipped: Council Proposals (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Council Voting (r:30 w:30)
	// Proof Skipped: Council Voting (max_values: None, max_size: None, mode: Measured)
	// Storage: Council Prime (r:0 w:1)
	// Proof Skipped: Council Prime (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `m` is `[0, 13]`.
	/// The range of component `n` is `[0, 13]`.
	/// The range of component `p` is `[0, 30]`.
	fn set_members(m: u32, _n: u32, p: u32) -> Weight {
		// Minimum execution time: 7_017 nanoseconds.
		Weight::from_ref_time(7_096_000 as u64) // Standard Error: 264_251
			.saturating_add(Weight::from_ref_time(2_929_088 as u64).saturating_mul(m as u64))
			// Standard Error: 115_153
			.saturating_add(Weight::from_ref_time(2_515_460 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(m as u64)))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(p as u64)))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(m as u64)))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(p as u64)))
	}
	// Storage: Council Members (r:1 w:0)
	// Proof Skipped: Council Members (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 13]`.
	fn execute(b: u32, m: u32) -> Weight {
		// Minimum execution time: 11_453 nanoseconds.
		Weight::from_ref_time(11_756_128 as u64) // Standard Error: 69
			.saturating_add(Weight::from_ref_time(1_052 as u64).saturating_mul(b as u64))
			// Standard Error: 5_926
			.saturating_add(Weight::from_ref_time(17_425 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: Council Members (r:1 w:0)
	// Proof Skipped: Council Members (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Council ProposalOf (r:1 w:0)
	// Proof Skipped: Council ProposalOf (max_values: None, max_size: None, mode: Measured)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 13]`.
	fn propose_execute(b: u32, m: u32) -> Weight {
		// Minimum execution time: 13_019 nanoseconds.
		Weight::from_ref_time(13_051_409 as u64) // Standard Error: 64
			.saturating_add(Weight::from_ref_time(1_241 as u64).saturating_mul(b as u64))
			// Standard Error: 5_533
			.saturating_add(Weight::from_ref_time(32_070 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
	}
	// Storage: Council Members (r:1 w:0)
	// Proof Skipped: Council Members (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Council ProposalOf (r:1 w:1)
	// Proof Skipped: Council ProposalOf (max_values: None, max_size: None, mode: Measured)
	// Storage: Council Proposals (r:1 w:1)
	// Proof Skipped: Council Proposals (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Council ProposalCount (r:1 w:1)
	// Proof Skipped: Council ProposalCount (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Council Voting (r:0 w:1)
	// Proof Skipped: Council Voting (max_values: None, max_size: None, mode: Measured)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[2, 13]`.
	/// The range of component `p` is `[1, 30]`.
	fn propose_proposed(b: u32, m: u32, p: u32) -> Weight {
		// Minimum execution time: 17_128 nanoseconds.
		Weight::from_ref_time(16_036_417 as u64) // Standard Error: 193
			.saturating_add(Weight::from_ref_time(2_392 as u64).saturating_mul(b as u64))
			// Standard Error: 17_266
			.saturating_add(Weight::from_ref_time(11_206 as u64).saturating_mul(m as u64))
			// Standard Error: 6_749
			.saturating_add(Weight::from_ref_time(202_623 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: Council Members (r:1 w:0)
	// Proof Skipped: Council Members (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Council Voting (r:1 w:1)
	// Proof Skipped: Council Voting (max_values: None, max_size: None, mode: Measured)
	/// The range of component `m` is `[5, 13]`.
	fn vote(m: u32) -> Weight {
		// Minimum execution time: 16_620 nanoseconds.
		Weight::from_ref_time(16_612_395 as u64) // Standard Error: 6_191
			.saturating_add(Weight::from_ref_time(69_165 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Council Voting (r:1 w:1)
	// Proof Skipped: Council Voting (max_values: None, max_size: None, mode: Measured)
	// Storage: Council Members (r:1 w:0)
	// Proof Skipped: Council Members (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Council Proposals (r:1 w:1)
	// Proof Skipped: Council Proposals (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Council ProposalOf (r:0 w:1)
	// Proof Skipped: Council ProposalOf (max_values: None, max_size: None, mode: Measured)
	/// The range of component `m` is `[4, 13]`.
	/// The range of component `p` is `[1, 30]`.
	fn close_early_disapproved(m: u32, p: u32) -> Weight {
		// Minimum execution time: 17_879 nanoseconds.
		Weight::from_ref_time(18_049_333 as u64) // Standard Error: 13_750
			.saturating_add(Weight::from_ref_time(51_486 as u64).saturating_mul(m as u64))
			// Standard Error: 4_343
			.saturating_add(Weight::from_ref_time(152_386 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Council Voting (r:1 w:1)
	// Proof Skipped: Council Voting (max_values: None, max_size: None, mode: Measured)
	// Storage: Council Members (r:1 w:0)
	// Proof Skipped: Council Members (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Council ProposalOf (r:1 w:1)
	// Proof Skipped: Council ProposalOf (max_values: None, max_size: None, mode: Measured)
	// Storage: Council Proposals (r:1 w:1)
	// Proof Skipped: Council Proposals (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 13]`.
	/// The range of component `p` is `[1, 30]`.
	fn close_early_approved(b: u32, m: u32, p: u32) -> Weight {
		// Minimum execution time: 24_101 nanoseconds.
		Weight::from_ref_time(24_212_139 as u64) // Standard Error: 209
			.saturating_add(Weight::from_ref_time(1_304 as u64).saturating_mul(b as u64))
			// Standard Error: 23_172
			.saturating_add(Weight::from_ref_time(6_870 as u64).saturating_mul(m as u64))
			// Standard Error: 7_332
			.saturating_add(Weight::from_ref_time(189_428 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Council Voting (r:1 w:1)
	// Proof Skipped: Council Voting (max_values: None, max_size: None, mode: Measured)
	// Storage: Council Members (r:1 w:0)
	// Proof Skipped: Council Members (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Council Prime (r:1 w:0)
	// Proof Skipped: Council Prime (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Council Proposals (r:1 w:1)
	// Proof Skipped: Council Proposals (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Council ProposalOf (r:0 w:1)
	// Proof Skipped: Council ProposalOf (max_values: None, max_size: None, mode: Measured)
	/// The range of component `m` is `[4, 13]`.
	/// The range of component `p` is `[1, 30]`.
	fn close_disapproved(m: u32, p: u32) -> Weight {
		// Minimum execution time: 19_833 nanoseconds.
		Weight::from_ref_time(19_763_284 as u64) // Standard Error: 13_065
			.saturating_add(Weight::from_ref_time(75_028 as u64).saturating_mul(m as u64))
			// Standard Error: 4_127
			.saturating_add(Weight::from_ref_time(142_631 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Council Voting (r:1 w:1)
	// Proof Skipped: Council Voting (max_values: None, max_size: None, mode: Measured)
	// Storage: Council Members (r:1 w:0)
	// Proof Skipped: Council Members (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Council Prime (r:1 w:0)
	// Proof Skipped: Council Prime (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Council ProposalOf (r:1 w:1)
	// Proof Skipped: Council ProposalOf (max_values: None, max_size: None, mode: Measured)
	// Storage: Council Proposals (r:1 w:1)
	// Proof Skipped: Council Proposals (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 13]`.
	/// The range of component `p` is `[1, 30]`.
	fn close_approved(b: u32, m: u32, p: u32) -> Weight {
		// Minimum execution time: 25_670 nanoseconds.
		Weight::from_ref_time(25_548_837 as u64) // Standard Error: 223
			.saturating_add(Weight::from_ref_time(1_285 as u64).saturating_mul(b as u64))
			// Standard Error: 24_717
			.saturating_add(Weight::from_ref_time(58_700 as u64).saturating_mul(m as u64))
			// Standard Error: 7_821
			.saturating_add(Weight::from_ref_time(191_251 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Council Proposals (r:1 w:1)
	// Proof Skipped: Council Proposals (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Council Voting (r:0 w:1)
	// Proof Skipped: Council Voting (max_values: None, max_size: None, mode: Measured)
	// Storage: Council ProposalOf (r:0 w:1)
	// Proof Skipped: Council ProposalOf (max_values: None, max_size: None, mode: Measured)
	/// The range of component `p` is `[1, 30]`.
	fn disapprove_proposal(p: u32) -> Weight {
		// Minimum execution time: 11_462 nanoseconds.
		Weight::from_ref_time(12_143_689 as u64) // Standard Error: 4_793
			.saturating_add(Weight::from_ref_time(94_020 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
}
