// This file is part of HydraDX.

// Copyright (C) 2020-2023  Intergalactic, Limited (GIB).
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for council
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-16, STEPS: 5, REPEAT: 20, LOW RANGE: [], HIGH RANGE: []
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/hydradx
// benchmark
// pallet
// --pallet=council
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --chain=dev
// --extrinsic=*
// --steps=5
// --repeat=20
// --output
// council.rs
// --template
// .maintain/pallet-weight-template-no-back.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

use council::weights::WeightInfo;

/// Weights for council using the hydraDX node and recommended hardware.
pub struct HydraWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> WeightInfo for HydraWeight<T> {
	// Storage: Council Members (r:1 w:1)
	// Proof Skipped: Council Members (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Council Proposals (r:1 w:0)
	// Proof Skipped: Council Proposals (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Council Voting (r:30 w:30)
	// Proof Skipped: Council Voting (max_values: None, max_size: None, mode: Measured)
	// Storage: Council Prime (r:0 w:1)
	// Proof Skipped: Council Prime (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `m` is `[0, 13]`.
	/// The range of component `n` is `[0, 13]`.
	/// The range of component `p` is `[0, 30]`.
    fn set_members(m: u32, _n: u32, p: u32, ) -> Weight {
        // Minimum execution time: 12_853 nanoseconds.
        Weight::from_ref_time(12_991_000 as u64)            // Standard Error: 401_781
            .saturating_add(Weight::from_ref_time(4_277_402 as u64).saturating_mul(m as u64))
            // Standard Error: 175_085
            .saturating_add(Weight::from_ref_time(3_794_778 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(m as u64)))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(p as u64)))
            .saturating_add(T::DbWeight::get().writes(2 as u64))
            .saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(m as u64)))
            .saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(p as u64)))
    }
	// Storage: Council Members (r:1 w:0)
	// Proof Skipped: Council Members (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 13]`.
    fn execute(b: u32, m: u32, ) -> Weight {
        // Minimum execution time: 20_787 nanoseconds.
        Weight::from_ref_time(20_730_060 as u64)            // Standard Error: 72
            .saturating_add(Weight::from_ref_time(2_261 as u64).saturating_mul(b as u64))
            // Standard Error: 6_152
            .saturating_add(Weight::from_ref_time(58_987 as u64).saturating_mul(m as u64))
            .saturating_add(T::DbWeight::get().reads(1 as u64))
    }
	// Storage: Council Members (r:1 w:0)
	// Proof Skipped: Council Members (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Council ProposalOf (r:1 w:0)
	// Proof Skipped: Council ProposalOf (max_values: None, max_size: None, mode: Measured)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 13]`.
    fn propose_execute(b: u32, m: u32, ) -> Weight {
        // Minimum execution time: 24_302 nanoseconds.
        Weight::from_ref_time(24_951_667 as u64)            // Standard Error: 86
            .saturating_add(Weight::from_ref_time(1_343 as u64).saturating_mul(b as u64))
            // Standard Error: 7_360
            .saturating_add(Weight::from_ref_time(20_953 as u64).saturating_mul(m as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
    }
	// Storage: Council Members (r:1 w:0)
	// Proof Skipped: Council Members (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Council ProposalOf (r:1 w:1)
	// Proof Skipped: Council ProposalOf (max_values: None, max_size: None, mode: Measured)
	// Storage: Council Proposals (r:1 w:1)
	// Proof Skipped: Council Proposals (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Council ProposalCount (r:1 w:1)
	// Proof Skipped: Council ProposalCount (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Council Voting (r:0 w:1)
	// Proof Skipped: Council Voting (max_values: None, max_size: None, mode: Measured)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[2, 13]`.
	/// The range of component `p` is `[1, 30]`.
    fn propose_proposed(b: u32, m: u32, p: u32, ) -> Weight {
        // Minimum execution time: 31_619 nanoseconds.
        Weight::from_ref_time(30_180_102 as u64)            // Standard Error: 218
            .saturating_add(Weight::from_ref_time(2_703 as u64).saturating_mul(b as u64))
            // Standard Error: 19_537
            .saturating_add(Weight::from_ref_time(4_352 as u64).saturating_mul(m as u64))
            // Standard Error: 7_637
            .saturating_add(Weight::from_ref_time(330_522 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
            .saturating_add(T::DbWeight::get().writes(4 as u64))
    }
	// Storage: Council Members (r:1 w:0)
	// Proof Skipped: Council Members (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Council Voting (r:1 w:1)
	// Proof Skipped: Council Voting (max_values: None, max_size: None, mode: Measured)
	/// The range of component `m` is `[5, 13]`.
    fn vote(m: u32, ) -> Weight {
        // Minimum execution time: 26_243 nanoseconds.
        Weight::from_ref_time(26_642_125 as u64)            // Standard Error: 10_747
            .saturating_add(Weight::from_ref_time(71_975 as u64).saturating_mul(m as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
	// Storage: Council Voting (r:1 w:1)
	// Proof Skipped: Council Voting (max_values: None, max_size: None, mode: Measured)
	// Storage: Council Members (r:1 w:0)
	// Proof Skipped: Council Members (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Council Proposals (r:1 w:1)
	// Proof Skipped: Council Proposals (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Council ProposalOf (r:0 w:1)
	// Proof Skipped: Council ProposalOf (max_values: None, max_size: None, mode: Measured)
	/// The range of component `m` is `[4, 13]`.
	/// The range of component `p` is `[1, 30]`.
    fn close_early_disapproved(m: u32, p: u32, ) -> Weight {
        // Minimum execution time: 32_335 nanoseconds.
        Weight::from_ref_time(33_245_498 as u64)            // Standard Error: 21_775
            .saturating_add(Weight::from_ref_time(40_033 as u64).saturating_mul(m as u64))
            // Standard Error: 6_878
            .saturating_add(Weight::from_ref_time(235_827 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
            .saturating_add(T::DbWeight::get().writes(3 as u64))
    }
	// Storage: Council Voting (r:1 w:1)
	// Proof Skipped: Council Voting (max_values: None, max_size: None, mode: Measured)
	// Storage: Council Members (r:1 w:0)
	// Proof Skipped: Council Members (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Council ProposalOf (r:1 w:1)
	// Proof Skipped: Council ProposalOf (max_values: None, max_size: None, mode: Measured)
	// Storage: Council Proposals (r:1 w:1)
	// Proof Skipped: Council Proposals (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 13]`.
	/// The range of component `p` is `[1, 30]`.
    fn close_early_approved(b: u32, m: u32, p: u32, ) -> Weight {
        // Minimum execution time: 46_776 nanoseconds.
        Weight::from_ref_time(46_992_416 as u64)            // Standard Error: 233
            .saturating_add(Weight::from_ref_time(1_496 as u64).saturating_mul(b as u64))
            // Standard Error: 8_179
            .saturating_add(Weight::from_ref_time(299_666 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
            .saturating_add(T::DbWeight::get().writes(3 as u64))
    }
	// Storage: Council Voting (r:1 w:1)
	// Proof Skipped: Council Voting (max_values: None, max_size: None, mode: Measured)
	// Storage: Council Members (r:1 w:0)
	// Proof Skipped: Council Members (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Council Prime (r:1 w:0)
	// Proof Skipped: Council Prime (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Council Proposals (r:1 w:1)
	// Proof Skipped: Council Proposals (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Council ProposalOf (r:0 w:1)
	// Proof Skipped: Council ProposalOf (max_values: None, max_size: None, mode: Measured)
	/// The range of component `m` is `[4, 13]`.
	/// The range of component `p` is `[1, 30]`.
    fn close_disapproved(m: u32, p: u32, ) -> Weight {
        // Minimum execution time: 35_291 nanoseconds.
        Weight::from_ref_time(35_123_811 as u64)            // Standard Error: 23_526
            .saturating_add(Weight::from_ref_time(98_965 as u64).saturating_mul(m as u64))
            // Standard Error: 7_431
            .saturating_add(Weight::from_ref_time(265_357 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
            .saturating_add(T::DbWeight::get().writes(3 as u64))
    }
	// Storage: Council Voting (r:1 w:1)
	// Proof Skipped: Council Voting (max_values: None, max_size: None, mode: Measured)
	// Storage: Council Members (r:1 w:0)
	// Proof Skipped: Council Members (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Council Prime (r:1 w:0)
	// Proof Skipped: Council Prime (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Council ProposalOf (r:1 w:1)
	// Proof Skipped: Council ProposalOf (max_values: None, max_size: None, mode: Measured)
	// Storage: Council Proposals (r:1 w:1)
	// Proof Skipped: Council Proposals (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 13]`.
	/// The range of component `p` is `[1, 30]`.
    fn close_approved(b: u32, m: u32, p: u32, ) -> Weight {
        // Minimum execution time: 49_663 nanoseconds.
        Weight::from_ref_time(49_410_369 as u64)            // Standard Error: 264
            .saturating_add(Weight::from_ref_time(1_643 as u64).saturating_mul(b as u64))
            // Standard Error: 29_184
            .saturating_add(Weight::from_ref_time(20_684 as u64).saturating_mul(m as u64))
            // Standard Error: 9_235
            .saturating_add(Weight::from_ref_time(310_205 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(5 as u64))
            .saturating_add(T::DbWeight::get().writes(3 as u64))
    }
	// Storage: Council Proposals (r:1 w:1)
	// Proof Skipped: Council Proposals (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Council Voting (r:0 w:1)
	// Proof Skipped: Council Voting (max_values: None, max_size: None, mode: Measured)
	// Storage: Council ProposalOf (r:0 w:1)
	// Proof Skipped: Council ProposalOf (max_values: None, max_size: None, mode: Measured)
	/// The range of component `p` is `[1, 30]`.
    fn disapprove_proposal(p: u32, ) -> Weight {
        // Minimum execution time: 20_691 nanoseconds.
        Weight::from_ref_time(21_989_046 as u64)            // Standard Error: 11_768
            .saturating_add(Weight::from_ref_time(205_589 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().writes(3 as u64))
    }
}
