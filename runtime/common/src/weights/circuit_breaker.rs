// This file is part of HydraDX.

// Copyright (C) 2020-2023  Intergalactic, Limited (GIB).
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_circuit_breaker
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-22, STEPS: 5, REPEAT: 20, LOW RANGE: [], HIGH RANGE: []
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/hydradx
// benchmark
// pallet
// --pallet=pallet-circuit-breaker
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --chain=dev
// --extrinsic=*
// --steps=5
// --repeat=20
// --output
// circuit_breaker.rs
// --template
// .maintain/pallet-weight-template-no-back.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{
	traits::Get,
	weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

use pallet_circuit_breaker::weights::WeightInfo;

/// Weights for pallet_circuit_breaker using the hydraDX node and recommended hardware.
pub struct HydraWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> WeightInfo for HydraWeight<T> {
	/// The range of component `n` is `[0, 400]`.
	/// The range of component `m` is `[0, 400]`.
	fn on_finalize(n: u32, m: u32, ) -> Weight {
		// Minimum execution time: 310_147 nanoseconds.
		Weight::from_ref_time(314_819_000 as u64)            // Standard Error: 32_862
			.saturating_add(Weight::from_ref_time(290_334 as u64).saturating_mul(n as u64))
			// Standard Error: 32_862
			.saturating_add(Weight::from_ref_time(1_084_558 as u64).saturating_mul(m as u64))
	}
	fn on_finalize_single_liquidity_limit_entry() -> Weight {
		// Minimum execution time: 8_356 nanoseconds.
		Weight::from_ref_time(8_620_000 as u64)    }
	fn on_finalize_single_trade_limit_entry() -> Weight {
		// Minimum execution time: 8_409 nanoseconds.
		Weight::from_ref_time(8_627_000 as u64)    }
	fn on_finalize_empty() -> Weight {
		// Minimum execution time: 8_492 nanoseconds.
		Weight::from_ref_time(8_759_000 as u64)    }
	// Storage: CircuitBreaker TradeVolumeLimitPerAsset (r:0 w:1)
	// Proof: CircuitBreaker TradeVolumeLimitPerAsset (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	fn set_trade_volume_limit() -> Weight {
		// Minimum execution time: 12_557 nanoseconds.
		Weight::from_ref_time(12_852_000 as u64)            .saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: CircuitBreaker LiquidityAddLimitPerAsset (r:0 w:1)
	// Proof: CircuitBreaker LiquidityAddLimitPerAsset (max_values: None, max_size: Some(29), added: 2504, mode: MaxEncodedLen)
	fn set_add_liquidity_limit() -> Weight {
		// Minimum execution time: 12_968 nanoseconds.
		Weight::from_ref_time(13_333_000 as u64)            .saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: CircuitBreaker LiquidityRemoveLimitPerAsset (r:0 w:1)
	// Proof: CircuitBreaker LiquidityRemoveLimitPerAsset (max_values: None, max_size: Some(29), added: 2504, mode: MaxEncodedLen)
	fn set_remove_liquidity_limit() -> Weight {
		// Minimum execution time: 12_822 nanoseconds.
		Weight::from_ref_time(13_140_000 as u64)            .saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: CircuitBreaker LiquidityAddLimitPerAsset (r:1 w:0)
	// Proof: CircuitBreaker LiquidityAddLimitPerAsset (max_values: None, max_size: Some(29), added: 2504, mode: MaxEncodedLen)
	// Storage: CircuitBreaker AllowedAddLiquidityAmountPerAsset (r:1 w:1)
	// Proof: CircuitBreaker AllowedAddLiquidityAmountPerAsset (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	// Storage: CircuitBreaker LiquidityRemoveLimitPerAsset (r:1 w:0)
	// Proof: CircuitBreaker LiquidityRemoveLimitPerAsset (max_values: None, max_size: Some(29), added: 2504, mode: MaxEncodedLen)
	// Storage: CircuitBreaker AllowedRemoveLiquidityAmountPerAsset (r:1 w:1)
	// Proof: CircuitBreaker AllowedRemoveLiquidityAmountPerAsset (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	fn ensure_add_liquidity_limit() -> Weight {
		// Minimum execution time: 19_815 nanoseconds.
		Weight::from_ref_time(20_251_000 as u64)            .saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: CircuitBreaker LiquidityAddLimitPerAsset (r:1 w:0)
	// Proof: CircuitBreaker LiquidityAddLimitPerAsset (max_values: None, max_size: Some(29), added: 2504, mode: MaxEncodedLen)
	// Storage: CircuitBreaker AllowedAddLiquidityAmountPerAsset (r:1 w:1)
	// Proof: CircuitBreaker AllowedAddLiquidityAmountPerAsset (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	// Storage: CircuitBreaker LiquidityRemoveLimitPerAsset (r:1 w:0)
	// Proof: CircuitBreaker LiquidityRemoveLimitPerAsset (max_values: None, max_size: Some(29), added: 2504, mode: MaxEncodedLen)
	// Storage: CircuitBreaker AllowedRemoveLiquidityAmountPerAsset (r:1 w:1)
	// Proof: CircuitBreaker AllowedRemoveLiquidityAmountPerAsset (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	fn ensure_remove_liquidity_limit() -> Weight {
		// Minimum execution time: 18_011 nanoseconds.
		Weight::from_ref_time(18_202_000 as u64)            .saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: CircuitBreaker AllowedTradeVolumeLimitPerAsset (r:2 w:2)
	// Proof: CircuitBreaker AllowedTradeVolumeLimitPerAsset (max_values: None, max_size: Some(68), added: 2543, mode: MaxEncodedLen)
	// Storage: CircuitBreaker TradeVolumeLimitPerAsset (r:2 w:0)
	// Proof: CircuitBreaker TradeVolumeLimitPerAsset (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	fn ensure_pool_state_change_limit() -> Weight {
		// Minimum execution time: 18_080 nanoseconds.
		Weight::from_ref_time(18_365_000 as u64)            .saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
}
