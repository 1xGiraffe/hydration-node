name: build-and-deploy
on:
  push:
    branches:
      - hydra-parachain
  workflow_dispatch:
  pull_request:

env:
  RELAY_CHAIN_VERSION: v0.9.28

jobs:
  pop-runner-instance:
    name: create and setup infrastructure for branch
    runs-on: ubuntu-latest
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      IS_LOCAL: ${{ github.event.pull_request.head.repo.fork == false }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      EC2_SECRET: ${{ secrets.EC2_PWD }}
      S3_BACKEND_KEY_NAME: tf-state-${{ github.sha }}
    outputs:
      runner: ${{ steps.determine-runner.outputs.runner }}
    steps:
      - id: determine-runner
        name: Determine runner
        run: if $IS_LOCAL; then echo "::set-output name=runner::${{ github.sha }}"; else echo "::set-output name=runner::ubuntu-latest"; fi;
      - name: checkout code
        if: ${{ env.IS_LOCAL == 'true' }}
        uses: actions/checkout@v2.1.0
      - name: setup node
        if: ${{ env.IS_LOCAL == 'true' }}
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - uses: hashicorp/setup-terraform@v1
        if: ${{ env.IS_LOCAL == 'true' }}
        with:
          terraform_version: 0.12.25
      - name: rewrite tf state key
        id: tf-state-key
        if: ${{ env.IS_LOCAL == 'true' }}
        working-directory: ./infrastructure
        run: sed -i 's/BRANCH_ACTOR_KEY/${{ env.S3_BACKEND_KEY_NAME }}/g' infra.tf
      - name: Terraform Init
        if: ${{ env.IS_LOCAL == 'true' }}
        id: init
        working-directory: ./infrastructure
        run: terraform init
      - name: Terraform plan
        if: ${{ env.IS_LOCAL == 'true' }}
        id: plan
        working-directory: ./infrastructure
        run: terraform plan -var="ec2_pwd=$EC2_SECRET" -var="branch_name=${{ steps.determine-runner.outputs.runner }}"
      - name: Terraform apply
        if: ${{ env.IS_LOCAL == 'true' }}
        id: apply
        working-directory: ./infrastructure
        run: terraform apply -var="ec2_pwd=$EC2_SECRET" -var="branch_name=${{ steps.determine-runner.outputs.runner }}" -auto-approve
      - name: Sleep for 20 seconds
        if: ${{ env.IS_LOCAL == 'true' }}
        uses: jakejarvis/wait-action@master
        with:
          time: '20s'

  build:
    needs: pop-runner-instance
    runs-on: ${{ needs.pop-runner-instance.outputs.runner }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - run: git describe --tags --abbrev=0
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.12
      - name: Install Rust
        uses: codota/toolchain@00a8bf2bdcfe93aefd70422d3dec07337959d3a4
        with:
          profile: minimal
      - name: Run clippy
        run: make clippy
      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin
      - name: Test && Generate code coverage
        run: make coverage
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v1
        with:
          fail_ci_if_error: true
      - name: Build release
        run: time cargo build --release --quiet --locked
      - name: Version info
        run: ./target/release/hydradx --version
      - name: Get hydradx chainspec json
        run: |
          cp target/release/hydradx target/release/testing-hydradx
          chmod +x ./target/release/testing-hydradx
          ./target/release/testing-hydradx build-spec --chain devnet --raw > hydradx-testnet-chainspec.json
      - name: Upload config file
        uses: actions/upload-artifact@v2
        with:
          name: hydradx-testnet-chainspec.json
          path: ./hydradx-testnet-chainspec.json
      - name: Generate wasm binary for testnet
        run: ./target/release/testing-hydradx export-genesis-wasm --chain hydradx-testnet-chainspec.json > para-wasm

      - name: Generate genesis binary for testnet
        run: ./target/release/testing-hydradx export-genesis-state --chain hydradx-testnet-chainspec.json > para-genesis

      - name: Upload wasm binary
        uses: actions/upload-artifact@v2
        with:
          name: para-wasm
          path: ./para-wasm

      - name: Upload genesis binary
        uses: actions/upload-artifact@v2
        with:
          name: para-genesis
          path: ./para-genesis
      - name: Upload release binary
        uses: actions/upload-artifact@v2
        with:
          name: hydradx
          path: target/release/hydradx
      - name: Upload release wasm
        uses: actions/upload-artifact@v2
        with:
          name: hydradx_runtime.compact.compressed.wasm
          path: target/release/wbuild/hydradx-runtime/hydradx_runtime.compact.compressed.wasm
      - name: Upload testing-runtime wasm
        uses: actions/upload-artifact@v2
        with:
          name: testing_hydradx_runtime.compact.compressed.wasm
          path: target/release/wbuild/testing-hydradx-runtime/testing_hydradx_runtime.compact.compressed.wasm

  docker:
    needs: [pop-runner-instance, build]
    runs-on: ${{ needs.pop-runner-instance.outputs.runner }}
    env:
      DOCKER_CLI_EXPERIMENTAL: enabled
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Describe version
        run: git describe --tags --abbrev=0
      - name: Generate metadata for images
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: galacticcouncil/hydra-dx,ghcr.io/galacticcouncil/hydra-dx
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
      - uses: actions/download-artifact@v2
        name: Download node binary
        with:
          name: hydradx
          path: target/release
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ secrets.PKG_USER }}
          password: ${{ secrets.PKG_PWD }}
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASS }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  destroy-runner-instance:
    name: destroy infra
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: ${{ always() && github.event.pull_request.head.repo.fork == false }}
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      EC2_SECRET: ${{ secrets.EC2_PWD }}
      S3_BACKEND_KEY_NAME: tf-state-${{ github.sha }}
    steps:
      - name: checkout code
        uses: actions/checkout@v2.1.0
      - name: setup node
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.12.25
      - name: rewrite tf state key
        id: tf-state-key
        working-directory: ./infrastructure
        run: sed -i 's/BRANCH_ACTOR_KEY/${{ env.S3_BACKEND_KEY_NAME }}/g' infra.tf
      - name: Terraform Init
        id: init
        working-directory: ./infrastructure
        run: terraform init
      - name: Terraform apply
        id: apply
        working-directory: ./infrastructure
        run: terraform destroy -var="ec2_pwd=$EC2_SECRET" -var="branch_name=${{ needs.pop-runner-instance.outputs.runner }}" -auto-approve

  test-inclusion:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions/download-artifact@v2
        name: Download node binary
        with:
          name: hydradx
          path: target/release
      - uses: robinraju/release-downloader@v1
        name: Download relay chain binary
        with:
          repository: paritytech/polkadot
          tag: ${{ env.RELAY_CHAIN_VERSION }}
          fileName: polkadot
          out-file-path: ../polkadot/target/release
      - run: chmod +x ./hydradx && ./hydradx --version
        name: HydraDX version
        working-directory: target/release
      - run: chmod +x ./polkadot && ./polkadot --version
        name: Polkadot version
        working-directory: ../polkadot/target/release
      - uses: actions/setup-node@v2
        name: Setup node.js
        with:
          node-version: '14'
          check-latest: true
      - run: npm install && npm start
        name: Launch rococo local & wait for inclusion
        working-directory: scripts/wait-for-inclusion

  test-upgrade-runtime:
    needs: [build, version-check]
    runs-on: ubuntu-latest
    if: ${{ needs.version-check.outputs.runtime-upgraded == 'true' }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions/download-artifact@v2
        name: Download runtime wasm from pipeline
        with:
          name: hydradx_runtime.compact.compressed.wasm
          path: scripts/upgrade-runtime
      - uses: dawidd6/action-download-artifact@v2
        name: Download node binary from base
        with:
          workflow: tests.yml
          branch: ${{ github.event.pull_request.base.ref }}
          name: hydradx
          path: target/release
      - uses: robinraju/release-downloader@v1.2
        name: Download relay chain binary release
        with:
          repository: paritytech/polkadot
          latest: true
          fileName: polkadot
          out-file-path: ../polkadot/target/release
      - run: chmod +x ./hydradx && ./hydradx --version
        name: HydraDX version
        working-directory: target/release
      - run: chmod +x ./polkadot && ./polkadot --version
        name: Polkadot version
        working-directory: ../polkadot/target/release
      - uses: actions/setup-node@v2
        name: Setup node.js
        with:
          node-version: '14'
          check-latest: true
      - run: npm install && npm run start
        name: Test runtime upgrade
        working-directory: scripts/upgrade-runtime

  version-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    outputs:
      runtime-upgraded: ${{ steps.check-runtime.outputs.upgraded }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Install Rust
        uses: codota/toolchain@00a8bf2bdcfe93aefd70422d3dec07337959d3a4
        with:
          profile: minimal
      - name: Get crate versions
        run: |
          VERSION_UPDATE=$(./scripts/list_crate_updates.sh)
          VERSION_UPDATE=$(cat << EOF
          $VERSION_UPDATE
          EOF
          )
          echo "VERSION_UPDATE<<EOF" >> $GITHUB_ENV
          echo "$VERSION_UPDATE" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: Check runtime upgrade
        id: check-runtime
        if: contains(env.VERSION_UPDATE, 'Runtime version has been increased.')
        run: echo "::set-output name=upgraded::true"
      - name: Sticky Pull Request Comment
        uses: marocchino/sticky-pull-request-comment@v2.1.0
        with:
          message: |
            ${{ env.VERSION_UPDATE }}
      - name: Evaluate result
        if: contains(env.VERSION_UPDATE, 'have not been updated') || contains(env.VERSION_UPDATE, 'versions don''t match') || contains(env.VERSION_UPDATE, 'downgraded')
        run: exit 1
