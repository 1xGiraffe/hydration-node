// This file is part of HydraDX.

// Copyright (C) 2020-2023  Intergalactic, Limited (GIB).
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for cumulus_pallet_xcmp_queue
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-10-20, STEPS: 10, REPEAT: 30, LOW RANGE: [], HIGH RANGE: []
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/hydradx
// benchmark
// pallet
// --chain=dev
// --steps=10
// --repeat=30
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=.maintain/pallet-weight-template-no-back.hbs
// --pallet=cumulus-pallet-xcmp-queue
// --output=xcmp_queue.rs
// --extrinsic=*

#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{
	traits::Get,
	weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

use cumulus_pallet_xcmp_queue::weights::WeightInfo;

/// Weights for cumulus_pallet_xcmp_queue using the hydraDX node and recommended hardware.
pub struct HydraWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> WeightInfo for HydraWeight<T> {
	// Storage: XcmpQueue QueueConfig (r:1 w:1)
	// Proof Skipped: XcmpQueue QueueConfig (max_values: Some(1), max_size: None, mode: Measured)
	fn set_config_with_u32() -> Weight {
		// Minimum execution time: 7_869 nanoseconds.
		Weight::from_ref_time(8_101_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: XcmpQueue QueueConfig (r:1 w:1)
	// Proof Skipped: XcmpQueue QueueConfig (max_values: Some(1), max_size: None, mode: Measured)
	fn set_config_with_weight() -> Weight {
		// Minimum execution time: 8_010 nanoseconds.
		Weight::from_ref_time(8_212_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: XcmpQueue QueueConfig (r:1 w:0)
	// Proof Skipped: XcmpQueue QueueConfig (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: XcmpQueue QueueSuspended (r:1 w:0)
	// Proof Skipped: XcmpQueue QueueSuspended (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: XcmpQueue DeferredQueueSuspended (r:1 w:0)
	// Proof Skipped: XcmpQueue DeferredQueueSuspended (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: XcmpQueue DeferredIndices (r:1 w:1)
	// Proof Skipped: XcmpQueue DeferredIndices (max_values: None, max_size: None, mode: Measured)
	// Storage: XcmpQueue DeferredMessageBuckets (r:1 w:1)
	// Proof Skipped: XcmpQueue DeferredMessageBuckets (max_values: None, max_size: None, mode: Measured)
	// Storage: XcmpQueue CounterForOverweight (r:1 w:1)
	// Proof: XcmpQueue CounterForOverweight (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: XcmpQueue OverweightCount (r:1 w:1)
	// Proof Skipped: XcmpQueue OverweightCount (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: XcmpQueue Overweight (r:100 w:100)
	// Proof Skipped: XcmpQueue Overweight (max_values: None, max_size: None, mode: Measured)
	fn service_deferred() -> Weight {
		// Minimum execution time: 193_410_426 nanoseconds.
		Weight::from_ref_time(193_901_312_000 as u64)
			.saturating_add(T::DbWeight::get().reads(107 as u64))
			.saturating_add(T::DbWeight::get().writes(104 as u64))
	}
	// Storage: XcmpQueue DeferredMessageBuckets (r:1 w:1)
	// Proof Skipped: XcmpQueue DeferredMessageBuckets (max_values: None, max_size: None, mode: Measured)
	fn discard_deferred_bucket() -> Weight {
		// Minimum execution time: 112_292_897 nanoseconds.
		Weight::from_ref_time(112_586_652_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: XcmpQueue DeferredMessageBuckets (r:1 w:1)
	// Proof Skipped: XcmpQueue DeferredMessageBuckets (max_values: None, max_size: None, mode: Measured)
	fn discard_deferred_individual() -> Weight {
		// Minimum execution time: 124_783_889 nanoseconds.
		Weight::from_ref_time(125_149_821_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: XcmpQueue DeferredIndices (r:1 w:1)
	// Proof Skipped: XcmpQueue DeferredIndices (max_values: None, max_size: None, mode: Measured)
	// Storage: XcmpQueue DeferredMessageBuckets (r:1 w:1)
	// Proof Skipped: XcmpQueue DeferredMessageBuckets (max_values: None, max_size: None, mode: Measured)
	fn try_place_in_deferred_queue() -> Weight {
		// Minimum execution time: 530_788 nanoseconds.
		Weight::from_ref_time(537_065_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
}
