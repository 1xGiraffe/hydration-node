// This file is part of HydraDX.

// Copyright (C) 2020-2023  Intergalactic, Limited (GIB).
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_utility
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-16, STEPS: 5, REPEAT: 20, LOW RANGE: [], HIGH RANGE: []
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/hydradx
// benchmark
// pallet
// --pallet=pallet-utility
// --execution=wasm
// --wasm-execution=compiled
// --chain=dev
// --extrinsic=*
// --steps=5
// --repeat=20
// --output
// utility.rs
// --template
// .maintain/pallet-weight-template-no-back.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

use pallet_utility::weights::WeightInfo;

/// Weights for pallet_utility using the hydraDX node and recommended hardware.
pub struct HydraWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> WeightInfo for HydraWeight<T> {
	/// The range of component `c` is `[0, 1000]`.
    fn batch(c: u32, ) -> Weight {
        // Minimum execution time: 9_859 nanoseconds.
        Weight::from_ref_time(15_039_980 as u64)            // Standard Error: 5_718
            .saturating_add(Weight::from_ref_time(6_192_722 as u64).saturating_mul(c as u64))
    }
    fn as_derivative() -> Weight {
        // Minimum execution time: 8_143 nanoseconds.
        Weight::from_ref_time(8_381_000 as u64)    }
	/// The range of component `c` is `[0, 1000]`.
    fn batch_all(c: u32, ) -> Weight {
        // Minimum execution time: 9_520 nanoseconds.
        Weight::from_ref_time(19_064_580 as u64)            // Standard Error: 6_692
            .saturating_add(Weight::from_ref_time(6_572_833 as u64).saturating_mul(c as u64))
    }
    fn dispatch_as() -> Weight {
        // Minimum execution time: 12_949 nanoseconds.
        Weight::from_ref_time(13_351_000 as u64)    }
	/// The range of component `c` is `[0, 1000]`.
    fn force_batch(c: u32, ) -> Weight {
        // Minimum execution time: 9_787 nanoseconds.
        Weight::from_ref_time(24_271_320 as u64)            // Standard Error: 7_206
            .saturating_add(Weight::from_ref_time(6_101_313 as u64).saturating_mul(c as u64))
    }
}
