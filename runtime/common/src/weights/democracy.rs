// This file is part of Hydra-node.

// Copyright (C) 2020-2021  Intergalactic, Limited (GIB).
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_democracy
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-02, STEPS: 5, REPEAT: 20, LOW RANGE: [], HIGH RANGE: []
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/hydradx
// benchmark
// pallet
// --chain=dev
// --steps=5
// --repeat=20
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=.maintain/pallet-weight-template-no-back.hbs
// --pallet=pallet_democracy
// --output=democracy.rs
// --extrinsic=*
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{
	traits::Get,
	weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

use pallet_democracy::weights::WeightInfo;

pub struct HydraWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> WeightInfo for HydraWeight<T> {
	fn propose() -> Weight {
		Weight::from_ref_time(69_598_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	fn second() -> Weight {
		Weight::from_ref_time(49_764_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	fn vote_new() -> Weight {
		Weight::from_ref_time(61_389_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	fn vote_existing() -> Weight {
		Weight::from_ref_time(61_282_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	fn emergency_cancel() -> Weight {
		Weight::from_ref_time(32_272_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	fn blacklist() -> Weight {
		Weight::from_ref_time(91_733_000 as u64)
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	fn external_propose() -> Weight {
		Weight::from_ref_time(19_914_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	fn external_propose_majority() -> Weight {
		Weight::from_ref_time(8_735_000 as u64).saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	fn external_propose_default() -> Weight {
		Weight::from_ref_time(8_906_000 as u64).saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	fn fast_track() -> Weight {
		Weight::from_ref_time(32_093_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	fn veto_external() -> Weight {
		Weight::from_ref_time(31_770_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	fn cancel_proposal() -> Weight {
		Weight::from_ref_time(78_943_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	fn cancel_referendum() -> Weight {
		Weight::from_ref_time(22_625_000 as u64).saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	fn on_initialize_base(r: u32) -> Weight {
		Weight::from_ref_time(12_636_000 as u64) // Standard Error: 10_000
			.saturating_add(Weight::from_ref_time(2_979_000 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	fn on_initialize_base_with_launch_period(r: u32) -> Weight {
		Weight::from_ref_time(16_295_000 as u64) // Standard Error: 7_000
			.saturating_add(Weight::from_ref_time(2_983_000 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	fn delegate(r: u32) -> Weight {
		Weight::from_ref_time(67_145_000 as u64) // Standard Error: 15_000
			.saturating_add(Weight::from_ref_time(4_392_000 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(r as u64)))
	}
	fn undelegate(r: u32) -> Weight {
		Weight::from_ref_time(39_799_000 as u64) // Standard Error: 11_000
			.saturating_add(Weight::from_ref_time(4_418_000 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(r as u64)))
	}
	fn clear_public_proposals() -> Weight {
		Weight::from_ref_time(10_628_000 as u64).saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	fn unlock_remove(r: u32) -> Weight {
		Weight::from_ref_time(46_945_000 as u64) // Standard Error: 1_000
			.saturating_add(Weight::from_ref_time(109_000 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	fn unlock_set(r: u32) -> Weight {
		Weight::from_ref_time(44_844_000 as u64) // Standard Error: 2_000
			.saturating_add(Weight::from_ref_time(190_000 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	fn remove_vote(r: u32) -> Weight {
		Weight::from_ref_time(25_730_000 as u64) // Standard Error: 3_000
			.saturating_add(Weight::from_ref_time(206_000 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	fn remove_other_vote(r: u32) -> Weight {
		Weight::from_ref_time(26_088_000 as u64) // Standard Error: 4_000
			.saturating_add(Weight::from_ref_time(202_000 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
}
