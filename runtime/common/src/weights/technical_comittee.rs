// This file is part of Hydra-node.

// Copyright (C) 2020-2021  Intergalactic, Limited (GIB).
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for tech
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-02, STEPS: 5, REPEAT: 20, LOW RANGE: [], HIGH RANGE: []
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/hydradx
// benchmark
// pallet
// --chain=dev
// --steps=5
// --repeat=20
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=.maintain/pallet-weight-template-no-back.hbs
// --pallet=tech
// --output=technical_comittee.rs
// --extrinsic=*
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{
	traits::Get,
	weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

use pallet_collective::weights::WeightInfo;

pub struct HydraWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> WeightInfo for HydraWeight<T> {
	fn set_members(m: u32, n: u32, p: u32) -> Weight {
		Weight::from_ref_time(5_079_000 as u64) // Standard Error: 52_000
			.saturating_add(Weight::from_ref_time(1_737_000 as u64).saturating_mul(m as u64)) // Standard Error: 52_000
			.saturating_add(Weight::from_ref_time(34_000 as u64).saturating_mul(n as u64)) // Standard Error: 24_000
			.saturating_add(Weight::from_ref_time(4_784_000 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(p as u64)))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(p as u64)))
	}
	fn execute(b: u32, m: u32) -> Weight {
		Weight::from_ref_time(30_498_000 as u64) // Standard Error: 0
			.saturating_add(Weight::from_ref_time(3_000 as u64).saturating_mul(b as u64)) // Standard Error: 11_000
			.saturating_add(Weight::from_ref_time(57_000 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	fn propose_execute(b: u32, _m: u32) -> Weight {
		Weight::from_ref_time(35_048_000 as u64) // Standard Error: 0
			.saturating_add(Weight::from_ref_time(2_000 as u64).saturating_mul(b as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
	}
	fn propose_proposed(b: u32, m: u32, p: u32) -> Weight {
		Weight::from_ref_time(39_688_000 as u64) // Standard Error: 0
			.saturating_add(Weight::from_ref_time(4_000 as u64).saturating_mul(b as u64)) // Standard Error: 35_000
			.saturating_add(Weight::from_ref_time(88_000 as u64).saturating_mul(m as u64)) // Standard Error: 14_000
			.saturating_add(Weight::from_ref_time(511_000 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	fn vote(m: u32) -> Weight {
		Weight::from_ref_time(38_461_000 as u64) // Standard Error: 13_000
			.saturating_add(Weight::from_ref_time(113_000 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	fn close_early_disapproved(m: u32, p: u32) -> Weight {
		Weight::from_ref_time(44_301_000 as u64) // Standard Error: 35_000
			.saturating_add(Weight::from_ref_time(64_000 as u64).saturating_mul(m as u64)) // Standard Error: 11_000
			.saturating_add(Weight::from_ref_time(462_000 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	fn close_early_approved(b: u32, m: u32, p: u32) -> Weight {
		Weight::from_ref_time(58_550_000 as u64) // Standard Error: 0
			.saturating_add(Weight::from_ref_time(2_000 as u64).saturating_mul(b as u64)) // Standard Error: 35_000
			.saturating_add(Weight::from_ref_time(94_000 as u64).saturating_mul(m as u64)) // Standard Error: 11_000
			.saturating_add(Weight::from_ref_time(456_000 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	fn close_disapproved(m: u32, p: u32) -> Weight {
		Weight::from_ref_time(48_120_000 as u64) // Standard Error: 29_000
			.saturating_add(Weight::from_ref_time(32_000 as u64).saturating_mul(m as u64)) // Standard Error: 9_000
			.saturating_add(Weight::from_ref_time(421_000 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	fn close_approved(b: u32, m: u32, p: u32) -> Weight {
		Weight::from_ref_time(61_279_000 as u64) // Standard Error: 0
			.saturating_add(Weight::from_ref_time(2_000 as u64).saturating_mul(b as u64)) // Standard Error: 37_000
			.saturating_add(Weight::from_ref_time(68_000 as u64).saturating_mul(m as u64)) // Standard Error: 11_000
			.saturating_add(Weight::from_ref_time(489_000 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	fn disapprove_proposal(p: u32) -> Weight {
		Weight::from_ref_time(31_512_000 as u64) // Standard Error: 11_000
			.saturating_add(Weight::from_ref_time(365_000 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
}
