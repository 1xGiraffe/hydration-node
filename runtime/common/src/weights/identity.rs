// This file is part of HydraDX.

// Copyright (C) 2020-2023  Intergalactic, Limited (GIB).
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_identity
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-05, STEPS: 5, REPEAT: 20, LOW RANGE: [], HIGH RANGE: []
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/hydradx
// benchmark
// pallet
// --pallet=pallet-identity
// --extra
// --chain=dev
// --extrinsic=*
// --steps=5
// --repeat=20
// --output
// identity.rs
// --template
// .maintain/pallet-weight-template-no-back.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{
	traits::Get,
	weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

use pallet_identity::weights::WeightInfo;

/// Weights for pallet_identity using the hydraDX node and recommended hardware.
pub struct HydraWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> WeightInfo for HydraWeight<T> {
	// Storage: Identity Registrars (r:1 w:1)
	// Proof: Identity Registrars (max_values: Some(1), max_size: Some(1141), added: 1636, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 19]`.
	fn add_registrar(r: u32) -> Weight {
		// Minimum execution time: 8_285 nanoseconds.
		Weight::from_ref_time(8_510_609 as u64) // Standard Error: 4_520
			.saturating_add(Weight::from_ref_time(131_435 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Identity IdentityOf (r:1 w:1)
	// Proof: Identity IdentityOf (max_values: None, max_size: Some(7538), added: 10013, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 20]`.
	/// The range of component `x` is `[0, 100]`.
	fn set_identity(r: u32, x: u32) -> Weight {
		// Minimum execution time: 19_463 nanoseconds.
		Weight::from_ref_time(18_419_453 as u64) // Standard Error: 5_011
			.saturating_add(Weight::from_ref_time(76_082 as u64).saturating_mul(r as u64))
			// Standard Error: 972
			.saturating_add(Weight::from_ref_time(137_103 as u64).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Identity IdentityOf (r:1 w:0)
	// Proof: Identity IdentityOf (max_values: None, max_size: Some(7538), added: 10013, mode: MaxEncodedLen)
	// Storage: Identity SubsOf (r:1 w:1)
	// Proof: Identity SubsOf (max_values: None, max_size: Some(3258), added: 5733, mode: MaxEncodedLen)
	// Storage: Identity SuperOf (r:100 w:100)
	// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 100]`.
	fn set_subs_new(s: u32) -> Weight {
		// Minimum execution time: 7_777 nanoseconds.
		Weight::from_ref_time(11_664_400 as u64) // Standard Error: 11_081
			.saturating_add(Weight::from_ref_time(1_489_642 as u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(s as u64)))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(s as u64)))
	}
	// Storage: Identity IdentityOf (r:1 w:0)
	// Proof: Identity IdentityOf (max_values: None, max_size: Some(7538), added: 10013, mode: MaxEncodedLen)
	// Storage: Identity SubsOf (r:1 w:1)
	// Proof: Identity SubsOf (max_values: None, max_size: Some(3258), added: 5733, mode: MaxEncodedLen)
	// Storage: Identity SuperOf (r:0 w:100)
	// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	/// The range of component `p` is `[0, 100]`.
	fn set_subs_old(p: u32) -> Weight {
		// Minimum execution time: 7_857 nanoseconds.
		Weight::from_ref_time(11_742_800 as u64) // Standard Error: 10_913
			.saturating_add(Weight::from_ref_time(727_550 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(p as u64)))
	}
	// Storage: Identity SubsOf (r:1 w:1)
	// Proof: Identity SubsOf (max_values: None, max_size: Some(3258), added: 5733, mode: MaxEncodedLen)
	// Storage: Identity IdentityOf (r:1 w:1)
	// Proof: Identity IdentityOf (max_values: None, max_size: Some(7538), added: 10013, mode: MaxEncodedLen)
	// Storage: Identity SuperOf (r:0 w:100)
	// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 20]`.
	/// The range of component `s` is `[0, 100]`.
	/// The range of component `x` is `[0, 100]`.
	fn clear_identity(_r: u32, s: u32, x: u32) -> Weight {
		// Minimum execution time: 30_309 nanoseconds.
		Weight::from_ref_time(20_344_516 as u64) // Standard Error: 2_513
			.saturating_add(Weight::from_ref_time(670_881 as u64).saturating_mul(s as u64))
			// Standard Error: 2_513
			.saturating_add(Weight::from_ref_time(113_120 as u64).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(s as u64)))
	}
	// Storage: Identity Registrars (r:1 w:0)
	// Proof: Identity Registrars (max_values: Some(1), max_size: Some(1141), added: 1636, mode: MaxEncodedLen)
	// Storage: Identity IdentityOf (r:1 w:1)
	// Proof: Identity IdentityOf (max_values: None, max_size: Some(7538), added: 10013, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 20]`.
	/// The range of component `x` is `[0, 100]`.
	fn request_judgement(_r: u32, x: u32) -> Weight {
		// Minimum execution time: 21_062 nanoseconds.
		Weight::from_ref_time(21_649_291 as u64) // Standard Error: 2_554
			.saturating_add(Weight::from_ref_time(161_726 as u64).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Identity IdentityOf (r:1 w:1)
	// Proof: Identity IdentityOf (max_values: None, max_size: Some(7538), added: 10013, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 20]`.
	/// The range of component `x` is `[0, 100]`.
	fn cancel_request(r: u32, x: u32) -> Weight {
		// Minimum execution time: 18_088 nanoseconds.
		Weight::from_ref_time(15_492_336 as u64) // Standard Error: 12_040
			.saturating_add(Weight::from_ref_time(117_055 as u64).saturating_mul(r as u64))
			// Standard Error: 2_337
			.saturating_add(Weight::from_ref_time(173_350 as u64).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Identity Registrars (r:1 w:1)
	// Proof: Identity Registrars (max_values: Some(1), max_size: Some(1141), added: 1636, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 19]`.
	fn set_fee(r: u32) -> Weight {
		// Minimum execution time: 5_896 nanoseconds.
		Weight::from_ref_time(6_124_512 as u64) // Standard Error: 3_520
			.saturating_add(Weight::from_ref_time(110_082 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Identity Registrars (r:1 w:1)
	// Proof: Identity Registrars (max_values: Some(1), max_size: Some(1141), added: 1636, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 19]`.
	fn set_account_id(r: u32) -> Weight {
		// Minimum execution time: 6_976 nanoseconds.
		Weight::from_ref_time(7_317_961 as u64) // Standard Error: 3_742
			.saturating_add(Weight::from_ref_time(92_903 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Identity Registrars (r:1 w:1)
	// Proof: Identity Registrars (max_values: Some(1), max_size: Some(1141), added: 1636, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 19]`.
	fn set_fields(r: u32) -> Weight {
		// Minimum execution time: 6_839 nanoseconds.
		Weight::from_ref_time(7_242_318 as u64) // Standard Error: 5_356
			.saturating_add(Weight::from_ref_time(93_334 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Identity Registrars (r:1 w:0)
	// Proof: Identity Registrars (max_values: Some(1), max_size: Some(1141), added: 1636, mode: MaxEncodedLen)
	// Storage: Identity IdentityOf (r:1 w:1)
	// Proof: Identity IdentityOf (max_values: None, max_size: Some(7538), added: 10013, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 19]`.
	/// The range of component `x` is `[0, 100]`.
	fn provide_judgement(r: u32, x: u32) -> Weight {
		// Minimum execution time: 16_992 nanoseconds.
		Weight::from_ref_time(16_189_611 as u64) // Standard Error: 9_530
			.saturating_add(Weight::from_ref_time(39_347 as u64).saturating_mul(r as u64))
			// Standard Error: 1_735
			.saturating_add(Weight::from_ref_time(263_517 as u64).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Identity SubsOf (r:1 w:1)
	// Proof: Identity SubsOf (max_values: None, max_size: Some(3258), added: 5733, mode: MaxEncodedLen)
	// Storage: Identity IdentityOf (r:1 w:1)
	// Proof: Identity IdentityOf (max_values: None, max_size: Some(7538), added: 10013, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Identity SuperOf (r:0 w:100)
	// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 20]`.
	/// The range of component `s` is `[0, 100]`.
	/// The range of component `x` is `[0, 100]`.
	fn kill_identity(r: u32, s: u32, x: u32) -> Weight {
		// Minimum execution time: 40_747 nanoseconds.
		Weight::from_ref_time(29_161_528 as u64) // Standard Error: 10_549
			.saturating_add(Weight::from_ref_time(63_201 as u64).saturating_mul(r as u64))
			// Standard Error: 2_048
			.saturating_add(Weight::from_ref_time(686_119 as u64).saturating_mul(s as u64))
			// Standard Error: 2_048
			.saturating_add(Weight::from_ref_time(118_420 as u64).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(s as u64)))
	}
	// Storage: Identity IdentityOf (r:1 w:0)
	// Proof: Identity IdentityOf (max_values: None, max_size: Some(7538), added: 10013, mode: MaxEncodedLen)
	// Storage: Identity SuperOf (r:1 w:1)
	// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	// Storage: Identity SubsOf (r:1 w:1)
	// Proof: Identity SubsOf (max_values: None, max_size: Some(3258), added: 5733, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 99]`.
	fn add_sub(s: u32) -> Weight {
		// Minimum execution time: 17_409 nanoseconds.
		Weight::from_ref_time(19_913_828 as u64) // Standard Error: 6_030
			.saturating_add(Weight::from_ref_time(78_503 as u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: Identity IdentityOf (r:1 w:0)
	// Proof: Identity IdentityOf (max_values: None, max_size: Some(7538), added: 10013, mode: MaxEncodedLen)
	// Storage: Identity SuperOf (r:1 w:1)
	// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	/// The range of component `s` is `[1, 100]`.
	fn rename_sub(s: u32) -> Weight {
		// Minimum execution time: 10_643 nanoseconds.
		Weight::from_ref_time(12_031_275 as u64) // Standard Error: 3_354
			.saturating_add(Weight::from_ref_time(29_116 as u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Identity IdentityOf (r:1 w:0)
	// Proof: Identity IdentityOf (max_values: None, max_size: Some(7538), added: 10013, mode: MaxEncodedLen)
	// Storage: Identity SuperOf (r:1 w:1)
	// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	// Storage: Identity SubsOf (r:1 w:1)
	// Proof: Identity SubsOf (max_values: None, max_size: Some(3258), added: 5733, mode: MaxEncodedLen)
	/// The range of component `s` is `[1, 100]`.
	fn remove_sub(s: u32) -> Weight {
		// Minimum execution time: 20_797 nanoseconds.
		Weight::from_ref_time(22_461_464 as u64) // Standard Error: 3_849
			.saturating_add(Weight::from_ref_time(55_963 as u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: Identity SuperOf (r:1 w:1)
	// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	// Storage: Identity SubsOf (r:1 w:1)
	// Proof: Identity SubsOf (max_values: None, max_size: Some(3258), added: 5733, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 99]`.
	fn quit_sub(s: u32) -> Weight {
		// Minimum execution time: 14_805 nanoseconds.
		Weight::from_ref_time(16_498_171 as u64) // Standard Error: 3_728
			.saturating_add(Weight::from_ref_time(50_038 as u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
}
