// This file is part of HydraDX.

// Copyright (C) 2020-2023  Intergalactic, Limited (GIB).
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_democracy
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-16, STEPS: 5, REPEAT: 20, LOW RANGE: [], HIGH RANGE: []
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/hydradx
// benchmark
// pallet
// --pallet=pallet-democracy
// --execution=wasm
// --wasm-execution=compiled
// --chain=dev
// --extrinsic=*
// --steps=5
// --repeat=20
// --output
// democracy.rs
// --template
// .maintain/pallet-weight-template-no-back.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

use pallet_democracy::weights::WeightInfo;

/// Weights for pallet_democracy using the hydraDX node and recommended hardware.
pub struct HydraWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> WeightInfo for HydraWeight<T> {
	// Storage: Democracy PublicPropCount (r:1 w:1)
	// Proof: Democracy PublicPropCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Democracy PublicProps (r:1 w:1)
	// Proof: Democracy PublicProps (max_values: Some(1), max_size: Some(16702), added: 17197, mode: MaxEncodedLen)
	// Storage: Democracy Blacklist (r:1 w:0)
	// Proof: Democracy Blacklist (max_values: None, max_size: Some(3238), added: 5713, mode: MaxEncodedLen)
	// Storage: Democracy DepositOf (r:0 w:1)
	// Proof: Democracy DepositOf (max_values: None, max_size: Some(3230), added: 5705, mode: MaxEncodedLen)
    fn propose() -> Weight {
        // Minimum execution time: 46_027 nanoseconds.
        Weight::from_ref_time(46_800_000 as u64)            .saturating_add(T::DbWeight::get().reads(3 as u64))
            .saturating_add(T::DbWeight::get().writes(3 as u64))
    }
	// Storage: Democracy DepositOf (r:1 w:1)
	// Proof: Democracy DepositOf (max_values: None, max_size: Some(3230), added: 5705, mode: MaxEncodedLen)
    fn second() -> Weight {
        // Minimum execution time: 41_332 nanoseconds.
        Weight::from_ref_time(42_008_000 as u64)            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
	// Storage: Democracy ReferendumInfoOf (r:1 w:1)
	// Proof: Democracy ReferendumInfoOf (max_values: None, max_size: Some(201), added: 2676, mode: MaxEncodedLen)
	// Storage: Democracy VotingOf (r:1 w:1)
	// Proof: Democracy VotingOf (max_values: None, max_size: Some(3795), added: 6270, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    fn vote_new() -> Weight {
        // Minimum execution time: 51_829 nanoseconds.
        Weight::from_ref_time(52_387_000 as u64)            .saturating_add(T::DbWeight::get().reads(3 as u64))
            .saturating_add(T::DbWeight::get().writes(3 as u64))
    }
	// Storage: Democracy ReferendumInfoOf (r:1 w:1)
	// Proof: Democracy ReferendumInfoOf (max_values: None, max_size: Some(201), added: 2676, mode: MaxEncodedLen)
	// Storage: Democracy VotingOf (r:1 w:1)
	// Proof: Democracy VotingOf (max_values: None, max_size: Some(3795), added: 6270, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    fn vote_existing() -> Weight {
        // Minimum execution time: 52_557 nanoseconds.
        Weight::from_ref_time(53_126_000 as u64)            .saturating_add(T::DbWeight::get().reads(3 as u64))
            .saturating_add(T::DbWeight::get().writes(3 as u64))
    }
	// Storage: Democracy ReferendumInfoOf (r:1 w:1)
	// Proof: Democracy ReferendumInfoOf (max_values: None, max_size: Some(201), added: 2676, mode: MaxEncodedLen)
	// Storage: Democracy Cancellations (r:1 w:1)
	// Proof: Democracy Cancellations (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
    fn emergency_cancel() -> Weight {
        // Minimum execution time: 21_935 nanoseconds.
        Weight::from_ref_time(22_695_000 as u64)            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(2 as u64))
    }
	// Storage: Democracy PublicProps (r:1 w:1)
	// Proof: Democracy PublicProps (max_values: Some(1), max_size: Some(16702), added: 17197, mode: MaxEncodedLen)
	// Storage: Democracy DepositOf (r:1 w:1)
	// Proof: Democracy DepositOf (max_values: None, max_size: Some(3230), added: 5705, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Democracy NextExternal (r:1 w:1)
	// Proof: Democracy NextExternal (max_values: Some(1), max_size: Some(132), added: 627, mode: MaxEncodedLen)
	// Storage: Democracy ReferendumInfoOf (r:1 w:1)
	// Proof: Democracy ReferendumInfoOf (max_values: None, max_size: Some(201), added: 2676, mode: MaxEncodedLen)
	// Storage: Democracy Blacklist (r:0 w:1)
	// Proof: Democracy Blacklist (max_values: None, max_size: Some(3238), added: 5713, mode: MaxEncodedLen)
    fn blacklist() -> Weight {
        // Minimum execution time: 101_976 nanoseconds.
        Weight::from_ref_time(103_782_000 as u64)            .saturating_add(T::DbWeight::get().reads(6 as u64))
            .saturating_add(T::DbWeight::get().writes(7 as u64))
    }
	// Storage: Democracy NextExternal (r:1 w:1)
	// Proof: Democracy NextExternal (max_values: Some(1), max_size: Some(132), added: 627, mode: MaxEncodedLen)
	// Storage: Democracy Blacklist (r:1 w:0)
	// Proof: Democracy Blacklist (max_values: None, max_size: Some(3238), added: 5713, mode: MaxEncodedLen)
    fn external_propose() -> Weight {
        // Minimum execution time: 15_385 nanoseconds.
        Weight::from_ref_time(15_672_000 as u64)            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
	// Storage: Democracy NextExternal (r:0 w:1)
	// Proof: Democracy NextExternal (max_values: Some(1), max_size: Some(132), added: 627, mode: MaxEncodedLen)
    fn external_propose_majority() -> Weight {
        // Minimum execution time: 4_926 nanoseconds.
        Weight::from_ref_time(5_175_000 as u64)            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
	// Storage: Democracy NextExternal (r:0 w:1)
	// Proof: Democracy NextExternal (max_values: Some(1), max_size: Some(132), added: 627, mode: MaxEncodedLen)
    fn external_propose_default() -> Weight {
        // Minimum execution time: 5_009 nanoseconds.
        Weight::from_ref_time(5_226_000 as u64)            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
	// Storage: Democracy NextExternal (r:1 w:1)
	// Proof: Democracy NextExternal (max_values: Some(1), max_size: Some(132), added: 627, mode: MaxEncodedLen)
	// Storage: Democracy ReferendumCount (r:1 w:1)
	// Proof: Democracy ReferendumCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Democracy ReferendumInfoOf (r:0 w:1)
	// Proof: Democracy ReferendumInfoOf (max_values: None, max_size: Some(201), added: 2676, mode: MaxEncodedLen)
    fn fast_track() -> Weight {
        // Minimum execution time: 21_208 nanoseconds.
        Weight::from_ref_time(21_541_000 as u64)            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(3 as u64))
    }
	// Storage: Democracy NextExternal (r:1 w:1)
	// Proof: Democracy NextExternal (max_values: Some(1), max_size: Some(132), added: 627, mode: MaxEncodedLen)
	// Storage: Democracy Blacklist (r:1 w:1)
	// Proof: Democracy Blacklist (max_values: None, max_size: Some(3238), added: 5713, mode: MaxEncodedLen)
    fn veto_external() -> Weight {
        // Minimum execution time: 27_578 nanoseconds.
        Weight::from_ref_time(28_041_000 as u64)            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(2 as u64))
    }
	// Storage: Democracy PublicProps (r:1 w:1)
	// Proof: Democracy PublicProps (max_values: Some(1), max_size: Some(16702), added: 17197, mode: MaxEncodedLen)
	// Storage: Democracy DepositOf (r:1 w:1)
	// Proof: Democracy DepositOf (max_values: None, max_size: Some(3230), added: 5705, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
    fn cancel_proposal() -> Weight {
        // Minimum execution time: 79_851 nanoseconds.
        Weight::from_ref_time(80_467_000 as u64)            .saturating_add(T::DbWeight::get().reads(4 as u64))
            .saturating_add(T::DbWeight::get().writes(4 as u64))
    }
	// Storage: Democracy ReferendumInfoOf (r:0 w:1)
	// Proof: Democracy ReferendumInfoOf (max_values: None, max_size: Some(201), added: 2676, mode: MaxEncodedLen)
    fn cancel_referendum() -> Weight {
        // Minimum execution time: 11_825 nanoseconds.
        Weight::from_ref_time(12_048_000 as u64)            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
	// Storage: Democracy LowestUnbaked (r:1 w:1)
	// Proof: Democracy LowestUnbaked (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Democracy ReferendumCount (r:1 w:0)
	// Proof: Democracy ReferendumCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Democracy ReferendumInfoOf (r:99 w:0)
	// Proof: Democracy ReferendumInfoOf (max_values: None, max_size: Some(201), added: 2676, mode: MaxEncodedLen)
	/// The range of component `r` is `[0, 99]`.
    fn on_initialize_base(r: u32, ) -> Weight {
        // Minimum execution time: 6_081 nanoseconds.
        Weight::from_ref_time(8_782_864 as u64)            // Standard Error: 18_850
            .saturating_add(Weight::from_ref_time(3_247_438 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
	// Storage: Democracy LowestUnbaked (r:1 w:1)
	// Proof: Democracy LowestUnbaked (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Democracy ReferendumCount (r:1 w:0)
	// Proof: Democracy ReferendumCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Democracy LastTabledWasExternal (r:1 w:0)
	// Proof: Democracy LastTabledWasExternal (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	// Storage: Democracy NextExternal (r:1 w:0)
	// Proof: Democracy NextExternal (max_values: Some(1), max_size: Some(132), added: 627, mode: MaxEncodedLen)
	// Storage: Democracy PublicProps (r:1 w:0)
	// Proof: Democracy PublicProps (max_values: Some(1), max_size: Some(16702), added: 17197, mode: MaxEncodedLen)
	// Storage: Democracy ReferendumInfoOf (r:99 w:0)
	// Proof: Democracy ReferendumInfoOf (max_values: None, max_size: Some(201), added: 2676, mode: MaxEncodedLen)
	/// The range of component `r` is `[0, 99]`.
    fn on_initialize_base_with_launch_period(r: u32, ) -> Weight {
        // Minimum execution time: 9_631 nanoseconds.
        Weight::from_ref_time(11_502_381 as u64)            // Standard Error: 7_033
            .saturating_add(Weight::from_ref_time(3_255_498 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(5 as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
	// Storage: Democracy VotingOf (r:3 w:3)
	// Proof: Democracy VotingOf (max_values: None, max_size: Some(3795), added: 6270, mode: MaxEncodedLen)
	// Storage: Democracy ReferendumInfoOf (r:99 w:99)
	// Proof: Democracy ReferendumInfoOf (max_values: None, max_size: Some(201), added: 2676, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// The range of component `r` is `[0, 99]`.
    fn delegate(r: u32, ) -> Weight {
        // Minimum execution time: 44_985 nanoseconds.
        Weight::from_ref_time(48_707_078 as u64)            // Standard Error: 18_494
            .saturating_add(Weight::from_ref_time(4_657_886 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
            .saturating_add(T::DbWeight::get().writes(4 as u64))
            .saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(r as u64)))
    }
	// Storage: Democracy VotingOf (r:2 w:2)
	// Proof: Democracy VotingOf (max_values: None, max_size: Some(3795), added: 6270, mode: MaxEncodedLen)
	// Storage: Democracy ReferendumInfoOf (r:99 w:99)
	// Proof: Democracy ReferendumInfoOf (max_values: None, max_size: Some(201), added: 2676, mode: MaxEncodedLen)
	/// The range of component `r` is `[0, 99]`.
    fn undelegate(r: u32, ) -> Weight {
        // Minimum execution time: 25_443 nanoseconds.
        Weight::from_ref_time(26_627_162 as u64)            // Standard Error: 11_327
            .saturating_add(Weight::from_ref_time(4_577_532 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
            .saturating_add(T::DbWeight::get().writes(2 as u64))
            .saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(r as u64)))
    }
	// Storage: Democracy PublicProps (r:0 w:1)
	// Proof: Democracy PublicProps (max_values: Some(1), max_size: Some(16702), added: 17197, mode: MaxEncodedLen)
    fn clear_public_proposals() -> Weight {
        // Minimum execution time: 5_003 nanoseconds.
        Weight::from_ref_time(5_165_000 as u64)            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
	// Storage: Democracy VotingOf (r:1 w:1)
	// Proof: Democracy VotingOf (max_values: None, max_size: Some(3795), added: 6270, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `r` is `[0, 99]`.
    fn unlock_remove(r: u32, ) -> Weight {
        // Minimum execution time: 24_706 nanoseconds.
        Weight::from_ref_time(28_624_037 as u64)            // Standard Error: 10_643
            .saturating_add(Weight::from_ref_time(74_137 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
            .saturating_add(T::DbWeight::get().writes(3 as u64))
    }
	// Storage: Democracy VotingOf (r:1 w:1)
	// Proof: Democracy VotingOf (max_values: None, max_size: Some(3795), added: 6270, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `r` is `[0, 99]`.
    fn unlock_set(r: u32, ) -> Weight {
        // Minimum execution time: 31_952 nanoseconds.
        Weight::from_ref_time(32_195_433 as u64)            // Standard Error: 1_014
            .saturating_add(Weight::from_ref_time(56_437 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
            .saturating_add(T::DbWeight::get().writes(3 as u64))
    }
	// Storage: Democracy ReferendumInfoOf (r:1 w:1)
	// Proof: Democracy ReferendumInfoOf (max_values: None, max_size: Some(201), added: 2676, mode: MaxEncodedLen)
	// Storage: Democracy VotingOf (r:1 w:1)
	// Proof: Democracy VotingOf (max_values: None, max_size: Some(3795), added: 6270, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 100]`.
    fn remove_vote(r: u32, ) -> Weight {
        // Minimum execution time: 19_016 nanoseconds.
        Weight::from_ref_time(20_540_503 as u64)            // Standard Error: 3_913
            .saturating_add(Weight::from_ref_time(87_383 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(2 as u64))
    }
	// Storage: Democracy ReferendumInfoOf (r:1 w:1)
	// Proof: Democracy ReferendumInfoOf (max_values: None, max_size: Some(201), added: 2676, mode: MaxEncodedLen)
	// Storage: Democracy VotingOf (r:1 w:1)
	// Proof: Democracy VotingOf (max_values: None, max_size: Some(3795), added: 6270, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 100]`.
    fn remove_other_vote(r: u32, ) -> Weight {
        // Minimum execution time: 18_684 nanoseconds.
        Weight::from_ref_time(20_454_465 as u64)            // Standard Error: 4_312
            .saturating_add(Weight::from_ref_time(86_059 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(2 as u64))
    }
}
