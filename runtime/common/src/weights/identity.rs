// This file is part of HydraDX.

// Copyright (C) 2020-2023  Intergalactic, Limited (GIB).
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_identity
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-05, STEPS: 5, REPEAT: 20, LOW RANGE: [], HIGH RANGE: []
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/hydradx
// benchmark
// pallet
// --pallet=pallet-identity
// --chain=dev
// --extrinsic=*
// --steps=5
// --repeat=20
// --output
// identity.rs
// --template
// .maintain/pallet-weight-template-no-back.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

use pallet_identity::weights::WeightInfo;

/// Weights for pallet_identity using the hydraDX node and recommended hardware.
pub struct HydraWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> WeightInfo for HydraWeight<T> {
	// Storage: Identity Registrars (r:1 w:1)
	// Proof: Identity Registrars (max_values: Some(1), max_size: Some(1141), added: 1636, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 19]`.
    fn add_registrar(r: u32, ) -> Weight {
        // Minimum execution time: 8_775 nanoseconds.
        Weight::from_ref_time(8_918_504 as u64)            // Standard Error: 1_696
            .saturating_add(Weight::from_ref_time(103_066 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
	// Storage: Identity IdentityOf (r:1 w:1)
	// Proof: Identity IdentityOf (max_values: None, max_size: Some(7538), added: 10013, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 20]`.
	/// The range of component `x` is `[0, 100]`.
    fn set_identity(r: u32, x: u32, ) -> Weight {
        // Minimum execution time: 19_143 nanoseconds.
        Weight::from_ref_time(18_013_848 as u64)            // Standard Error: 5_417
            .saturating_add(Weight::from_ref_time(85_750 as u64).saturating_mul(r as u64))
            // Standard Error: 1_051
            .saturating_add(Weight::from_ref_time(139_823 as u64).saturating_mul(x as u64))
            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
	// Storage: Identity IdentityOf (r:1 w:0)
	// Proof: Identity IdentityOf (max_values: None, max_size: Some(7538), added: 10013, mode: MaxEncodedLen)
	// Storage: Identity SubsOf (r:1 w:1)
	// Proof: Identity SubsOf (max_values: None, max_size: Some(3258), added: 5733, mode: MaxEncodedLen)
	// Storage: Identity SuperOf (r:100 w:100)
	// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 100]`.
    fn set_subs_new(s: u32, ) -> Weight {
        // Minimum execution time: 7_974 nanoseconds.
        Weight::from_ref_time(11_886_140 as u64)            // Standard Error: 10_753
            .saturating_add(Weight::from_ref_time(1_467_999 as u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(s as u64)))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
            .saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(s as u64)))
    }
	// Storage: Identity IdentityOf (r:1 w:0)
	// Proof: Identity IdentityOf (max_values: None, max_size: Some(7538), added: 10013, mode: MaxEncodedLen)
	// Storage: Identity SubsOf (r:1 w:1)
	// Proof: Identity SubsOf (max_values: None, max_size: Some(3258), added: 5733, mode: MaxEncodedLen)
	// Storage: Identity SuperOf (r:0 w:100)
	// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	/// The range of component `p` is `[0, 100]`.
    fn set_subs_old(p: u32, ) -> Weight {
        // Minimum execution time: 7_520 nanoseconds.
        Weight::from_ref_time(11_266_040 as u64)            // Standard Error: 10_431
            .saturating_add(Weight::from_ref_time(720_770 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
            .saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(p as u64)))
    }
	// Storage: Identity SubsOf (r:1 w:1)
	// Proof: Identity SubsOf (max_values: None, max_size: Some(3258), added: 5733, mode: MaxEncodedLen)
	// Storage: Identity IdentityOf (r:1 w:1)
	// Proof: Identity IdentityOf (max_values: None, max_size: Some(7538), added: 10013, mode: MaxEncodedLen)
	// Storage: Identity SuperOf (r:0 w:100)
	// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 20]`.
	/// The range of component `s` is `[0, 100]`.
	/// The range of component `x` is `[0, 100]`.
    fn clear_identity(r: u32, s: u32, x: u32, ) -> Weight {
        // Minimum execution time: 28_930 nanoseconds.
        Weight::from_ref_time(17_571_853 as u64)            // Standard Error: 11_158
            .saturating_add(Weight::from_ref_time(53_119 as u64).saturating_mul(r as u64))
            // Standard Error: 2_167
            .saturating_add(Weight::from_ref_time(675_950 as u64).saturating_mul(s as u64))
            // Standard Error: 2_167
            .saturating_add(Weight::from_ref_time(117_884 as u64).saturating_mul(x as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
            .saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(s as u64)))
    }
	// Storage: Identity Registrars (r:1 w:0)
	// Proof: Identity Registrars (max_values: Some(1), max_size: Some(1141), added: 1636, mode: MaxEncodedLen)
	// Storage: Identity IdentityOf (r:1 w:1)
	// Proof: Identity IdentityOf (max_values: None, max_size: Some(7538), added: 10013, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 20]`.
	/// The range of component `x` is `[0, 100]`.
    fn request_judgement(r: u32, x: u32, ) -> Weight {
        // Minimum execution time: 20_488 nanoseconds.
        Weight::from_ref_time(19_567_423 as u64)            // Standard Error: 15_509
            .saturating_add(Weight::from_ref_time(66_813 as u64).saturating_mul(r as u64))
            // Standard Error: 3_010
            .saturating_add(Weight::from_ref_time(159_993 as u64).saturating_mul(x as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
	// Storage: Identity IdentityOf (r:1 w:1)
	// Proof: Identity IdentityOf (max_values: None, max_size: Some(7538), added: 10013, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 20]`.
	/// The range of component `x` is `[0, 100]`.
    fn cancel_request(r: u32, x: u32, ) -> Weight {
        // Minimum execution time: 17_909 nanoseconds.
        Weight::from_ref_time(14_544_015 as u64)            // Standard Error: 15_126
            .saturating_add(Weight::from_ref_time(145_003 as u64).saturating_mul(r as u64))
            // Standard Error: 2_935
            .saturating_add(Weight::from_ref_time(178_330 as u64).saturating_mul(x as u64))
            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
	// Storage: Identity Registrars (r:1 w:1)
	// Proof: Identity Registrars (max_values: Some(1), max_size: Some(1141), added: 1636, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 19]`.
    fn set_fee(r: u32, ) -> Weight {
        // Minimum execution time: 6_238 nanoseconds.
        Weight::from_ref_time(6_443_151 as u64)            // Standard Error: 3_379
            .saturating_add(Weight::from_ref_time(94_772 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
	// Storage: Identity Registrars (r:1 w:1)
	// Proof: Identity Registrars (max_values: Some(1), max_size: Some(1141), added: 1636, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 19]`.
    fn set_account_id(r: u32, ) -> Weight {
        // Minimum execution time: 6_742 nanoseconds.
        Weight::from_ref_time(7_199_751 as u64)            // Standard Error: 4_709
            .saturating_add(Weight::from_ref_time(100_904 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
	// Storage: Identity Registrars (r:1 w:1)
	// Proof: Identity Registrars (max_values: Some(1), max_size: Some(1141), added: 1636, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 19]`.
    fn set_fields(r: u32, ) -> Weight {
        // Minimum execution time: 6_768 nanoseconds.
        Weight::from_ref_time(6_980_996 as u64)            // Standard Error: 3_502
            .saturating_add(Weight::from_ref_time(98_122 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
	// Storage: Identity Registrars (r:1 w:0)
	// Proof: Identity Registrars (max_values: Some(1), max_size: Some(1141), added: 1636, mode: MaxEncodedLen)
	// Storage: Identity IdentityOf (r:1 w:1)
	// Proof: Identity IdentityOf (max_values: None, max_size: Some(7538), added: 10013, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 19]`.
	/// The range of component `x` is `[0, 100]`.
    fn provide_judgement(r: u32, x: u32, ) -> Weight {
        // Minimum execution time: 16_891 nanoseconds.
        Weight::from_ref_time(15_019_654 as u64)            // Standard Error: 13_201
            .saturating_add(Weight::from_ref_time(105_084 as u64).saturating_mul(r as u64))
            // Standard Error: 2_403
            .saturating_add(Weight::from_ref_time(264_762 as u64).saturating_mul(x as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
	// Storage: Identity SubsOf (r:1 w:1)
	// Proof: Identity SubsOf (max_values: None, max_size: Some(3258), added: 5733, mode: MaxEncodedLen)
	// Storage: Identity IdentityOf (r:1 w:1)
	// Proof: Identity IdentityOf (max_values: None, max_size: Some(7538), added: 10013, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Identity SuperOf (r:0 w:100)
	// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 20]`.
	/// The range of component `s` is `[0, 100]`.
	/// The range of component `x` is `[0, 100]`.
    fn kill_identity(r: u32, s: u32, x: u32, ) -> Weight {
        // Minimum execution time: 40_672 nanoseconds.
        Weight::from_ref_time(28_430_102 as u64)            // Standard Error: 12_031
            .saturating_add(Weight::from_ref_time(86_455 as u64).saturating_mul(r as u64))
            // Standard Error: 2_336
            .saturating_add(Weight::from_ref_time(685_271 as u64).saturating_mul(s as u64))
            // Standard Error: 2_336
            .saturating_add(Weight::from_ref_time(118_280 as u64).saturating_mul(x as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
            .saturating_add(T::DbWeight::get().writes(3 as u64))
            .saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(s as u64)))
    }
	// Storage: Identity IdentityOf (r:1 w:0)
	// Proof: Identity IdentityOf (max_values: None, max_size: Some(7538), added: 10013, mode: MaxEncodedLen)
	// Storage: Identity SuperOf (r:1 w:1)
	// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	// Storage: Identity SubsOf (r:1 w:1)
	// Proof: Identity SubsOf (max_values: None, max_size: Some(3258), added: 5733, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 99]`.
    fn add_sub(s: u32, ) -> Weight {
        // Minimum execution time: 16_694 nanoseconds.
        Weight::from_ref_time(19_315_382 as u64)            // Standard Error: 6_786
            .saturating_add(Weight::from_ref_time(84_055 as u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
            .saturating_add(T::DbWeight::get().writes(2 as u64))
    }
	// Storage: Identity IdentityOf (r:1 w:0)
	// Proof: Identity IdentityOf (max_values: None, max_size: Some(7538), added: 10013, mode: MaxEncodedLen)
	// Storage: Identity SuperOf (r:1 w:1)
	// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	/// The range of component `s` is `[1, 100]`.
    fn rename_sub(s: u32, ) -> Weight {
        // Minimum execution time: 10_394 nanoseconds.
        Weight::from_ref_time(11_698_929 as u64)            // Standard Error: 3_367
            .saturating_add(Weight::from_ref_time(31_917 as u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
	// Storage: Identity IdentityOf (r:1 w:0)
	// Proof: Identity IdentityOf (max_values: None, max_size: Some(7538), added: 10013, mode: MaxEncodedLen)
	// Storage: Identity SuperOf (r:1 w:1)
	// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	// Storage: Identity SubsOf (r:1 w:1)
	// Proof: Identity SubsOf (max_values: None, max_size: Some(3258), added: 5733, mode: MaxEncodedLen)
	/// The range of component `s` is `[1, 100]`.
    fn remove_sub(s: u32, ) -> Weight {
        // Minimum execution time: 20_632 nanoseconds.
        Weight::from_ref_time(22_429_443 as u64)            // Standard Error: 4_389
            .saturating_add(Weight::from_ref_time(54_377 as u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
            .saturating_add(T::DbWeight::get().writes(2 as u64))
    }
	// Storage: Identity SuperOf (r:1 w:1)
	// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	// Storage: Identity SubsOf (r:1 w:1)
	// Proof: Identity SubsOf (max_values: None, max_size: Some(3258), added: 5733, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 99]`.
    fn quit_sub(s: u32, ) -> Weight {
        // Minimum execution time: 14_481 nanoseconds.
        Weight::from_ref_time(16_063_025 as u64)            // Standard Error: 3_477
            .saturating_add(Weight::from_ref_time(57_853 as u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(2 as u64))
    }
}
