// This file is part of HydraDX.

// Copyright (C) 2020-2023  Intergalactic, Limited (GIB).
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for frame_system
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-16, STEPS: 5, REPEAT: 20, LOW RANGE: [], HIGH RANGE: []
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/hydradx
// benchmark
// pallet
// --pallet=frame-system
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --chain=dev
// --extrinsic=*
// --steps=5
// --repeat=20
// --output
// system.rs
// --template
// .maintain/pallet-weight-template-no-back.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{
	traits::Get,
	weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

use frame_system::weights::WeightInfo;

/// Weights for frame_system using the hydraDX node and recommended hardware.
pub struct HydraWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> WeightInfo for HydraWeight<T> {
	/// The range of component `b` is `[0, 3932160]`.
<<<<<<< HEAD
	fn remark(b: u32) -> Weight {
		// Minimum execution time: 3_305 nanoseconds.
		Weight::from_ref_time(3_412_000 as u64) // Standard Error: 0
			.saturating_add(Weight::from_ref_time(409 as u64).saturating_mul(b as u64))
	}
	/// The range of component `b` is `[0, 3932160]`.
	fn remark_with_event(b: u32) -> Weight {
		// Minimum execution time: 10_426 nanoseconds.
		Weight::from_ref_time(10_558_000 as u64) // Standard Error: 3
			.saturating_add(Weight::from_ref_time(1_721 as u64).saturating_mul(b as u64))
	}
=======
    fn remark(b: u32, ) -> Weight {
        // Minimum execution time: 3_382 nanoseconds.
        Weight::from_ref_time(3_438_000 as u64)            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(413 as u64).saturating_mul(b as u64))
    }
	/// The range of component `b` is `[0, 3932160]`.
    fn remark_with_event(b: u32, ) -> Weight {
        // Minimum execution time: 10_562 nanoseconds.
        Weight::from_ref_time(10_656_000 as u64)            // Standard Error: 3
            .saturating_add(Weight::from_ref_time(1_722 as u64).saturating_mul(b as u64))
    }
>>>>>>> 8caba3a7 (new weights)
	// Storage: System Digest (r:1 w:1)
	// Proof Skipped: System Digest (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: unknown `0x3a686561707061676573` (r:0 w:1)
	// Proof Skipped: unknown `0x3a686561707061676573` (r:0 w:1)
<<<<<<< HEAD
	fn set_heap_pages() -> Weight {
		// Minimum execution time: 6_071 nanoseconds.
		Weight::from_ref_time(6_216_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	/// The range of component `i` is `[0, 1000]`.
	fn set_storage(i: u32) -> Weight {
		// Minimum execution time: 3_405 nanoseconds.
		Weight::from_ref_time(3_487_000 as u64) // Standard Error: 2_343
			.saturating_add(Weight::from_ref_time(750_658 as u64).saturating_mul(i as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(i as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	/// The range of component `i` is `[0, 1000]`.
	fn kill_storage(i: u32) -> Weight {
		// Minimum execution time: 3_356 nanoseconds.
		Weight::from_ref_time(3_421_000 as u64) // Standard Error: 2_273
			.saturating_add(Weight::from_ref_time(553_455 as u64).saturating_mul(i as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(i as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	/// The range of component `p` is `[0, 1000]`.
	fn kill_prefix(p: u32) -> Weight {
		// Minimum execution time: 6_303 nanoseconds.
		Weight::from_ref_time(6_361_000 as u64) // Standard Error: 2_998
			.saturating_add(Weight::from_ref_time(1_021_350 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(p as u64)))
	}
=======
    fn set_heap_pages() -> Weight {
        // Minimum execution time: 6_106 nanoseconds.
        Weight::from_ref_time(6_366_000 as u64)            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().writes(2 as u64))
    }
	// Storage: Skipped Metadata (r:0 w:0)
	// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	/// The range of component `i` is `[0, 1000]`.
    fn set_storage(i: u32, ) -> Weight {
        // Minimum execution time: 3_233 nanoseconds.
        Weight::from_ref_time(3_332_000 as u64)            // Standard Error: 9_692
            .saturating_add(Weight::from_ref_time(802_375 as u64).saturating_mul(i as u64))
            .saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(i as u64)))
    }
	// Storage: Skipped Metadata (r:0 w:0)
	// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	/// The range of component `i` is `[0, 1000]`.
    fn kill_storage(i: u32, ) -> Weight {
        // Minimum execution time: 3_364 nanoseconds.
        Weight::from_ref_time(3_438_000 as u64)            // Standard Error: 2_518
            .saturating_add(Weight::from_ref_time(546_238 as u64).saturating_mul(i as u64))
            .saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(i as u64)))
    }
	// Storage: Skipped Metadata (r:0 w:0)
	// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	/// The range of component `p` is `[0, 1000]`.
    fn kill_prefix(p: u32, ) -> Weight {
        // Minimum execution time: 6_339 nanoseconds.
        Weight::from_ref_time(6_429_000 as u64)            // Standard Error: 3_366
            .saturating_add(Weight::from_ref_time(1_024_606 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(p as u64)))
    }
>>>>>>> 8caba3a7 (new weights)
}
