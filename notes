/*
Command:
target/release/hydradx benchmark pallet --pallet=pallet-dca --chain=local --steps=5 --repeat=50 --extrinsic="*" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output weights-pallet.rs --template .maintain/pallet-weight-template.hbs


Command for common
target/release/hydradx benchmark pallet --pallet=pallet-dca --chain=local --steps=5 --repeat=20 --extrinsic="*" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output weights.rs --template .maintain/pallet-weight-template-no-back.hbs

Command for custom router
target/release/hydradx benchmark pallet --chain=dev --steps=5 --repeat=20 --execution=wasm --wasm-execution=compiled --heap-pages=4096 --template=.maintain/pallet-weight-template-no-back.hbs --pallet=pallet_route_executor --output=route_executor.rs --extrinsic="*"
 */
// regenerate all benchmark on reference - dca, common-dca, and route-executor
// make wh dependency also build
// - add integration test full_buy_dca_should_be_executed_then_completed with multiple orders
// - add integration test when trade fails with expected error
// - search for and process all todo
// - ask martin about the conversion issue - there is a stash with name "issue_with_convering_to_nonnative"
// check if balance did not decrease more than we unreserve - check if we spend only allocated money
// estimate the how much space we need  to a block then compare it to max weight
// let the team know that I added the math dependency to runtime if we really use mock rout eexecutor
		//TODO: add baance check if it we spent only the allocated money - for that we need omnipool or better mock