// This file is part of Hydra-node.

// Copyright (C) 2020-2021  Intergalactic, Limited (GIB).
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_proxy
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-04-30, STEPS: 5, REPEAT: 20, LOW RANGE: [], HIGH RANGE: []
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("local"), DB CACHE: 1024

// Executed Command:
// target/release/hydradx
// benchmark
// --chain=local
// --steps=5
// --repeat=20
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=.maintain/pallet-weight-template-no-back.hbs
// --pallet=pallet_proxy
// --output=proxy.rs
// --extrinsic=*
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{
	traits::Get,
	weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

use pallet_proxy::weights::WeightInfo;

pub struct HydraWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> WeightInfo for HydraWeight<T> {
	fn proxy(p: u32) -> Weight {
		Weight::from_ref_time(18_207_000 as u64) // Standard Error: 4_000
			.saturating_add(Weight::from_ref_time(123_000 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	fn proxy_announced(a: u32, p: u32) -> Weight {
		Weight::from_ref_time(38_461_000 as u64) // Standard Error: 4_000
			.saturating_add(Weight::from_ref_time(332_000 as u64).saturating_mul(a as u64)) // Standard Error: 4_000
			.saturating_add(Weight::from_ref_time(125_000 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	fn remove_announcement(a: u32, p: u32) -> Weight {
		Weight::from_ref_time(26_803_000 as u64) // Standard Error: 3_000
			.saturating_add(Weight::from_ref_time(336_000 as u64).saturating_mul(a as u64)) // Standard Error: 4_000
			.saturating_add(Weight::from_ref_time(10_000 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	fn reject_announcement(a: u32, _p: u32) -> Weight {
		Weight::from_ref_time(27_257_000 as u64) // Standard Error: 4_000
			.saturating_add(Weight::from_ref_time(332_000 as u64).saturating_mul(a as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	fn announce(a: u32, p: u32) -> Weight {
		Weight::from_ref_time(35_613_000 as u64) // Standard Error: 4_000
			.saturating_add(Weight::from_ref_time(333_000 as u64).saturating_mul(a as u64)) // Standard Error: 5_000
			.saturating_add(Weight::from_ref_time(132_000 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	fn add_proxy(p: u32) -> Weight {
		Weight::from_ref_time(29_897_000 as u64) // Standard Error: 4_000
			.saturating_add(Weight::from_ref_time(177_000 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	fn remove_proxy(p: u32) -> Weight {
		Weight::from_ref_time(25_683_000 as u64) // Standard Error: 6_000
			.saturating_add(Weight::from_ref_time(176_000 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	fn remove_proxies(p: u32) -> Weight {
		Weight::from_ref_time(25_338_000 as u64) // Standard Error: 3_000
			.saturating_add(Weight::from_ref_time(138_000 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	fn anonymous(p: u32) -> Weight {
		Weight::from_ref_time(34_159_000 as u64) // Standard Error: 6_000
			.saturating_add(Weight::from_ref_time(41_000 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	fn kill_anonymous(p: u32) -> Weight {
		Weight::from_ref_time(26_935_000 as u64) // Standard Error: 6_000
			.saturating_add(Weight::from_ref_time(127_000 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
}
