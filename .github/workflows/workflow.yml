name: build-and-deploy
#${GITHUB_REF##*/}
on:
  push:

jobs:
  pop-runner-instance:
    name: create and setup infrastructure for branch 
    runs-on: ubuntu-latest
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      EC2_SECRET: ${{ secrets.EC2_PWD }}
    steps:
      - name: checkout code
        uses: actions/checkout@v2.1.0
      - name: setup node  
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.12.25
      

      #- name: set env
       # id: set_env
       # working-directory: ./infrastructure
      #  run: echo "::set-env name=BRANCH_NAME::${{ github.head_ref }}"
       # continue-on-error: false

      - name: Terraform Init
        id: init
        working-directory: ./infrastructure
        run: terraform init
        continue-on-error: false

      - name: Terraform workspace
        id: workspace
        working-directory: ./infrastructure
        run: terraform workspace new aws-runner #variabilize
        continue-on-error: false   
      - name: Terraform plan
        id: plan
        working-directory: ./infrastructure
        run: terraform plan -var="ec2_secret=$EC2_SECRET"
        continue-on-error: false  
      - name: Terraform apply
        id: apply
        working-directory: ./infrastructure
        run: terraform apply -var="ec2_secret=$EC2_SECRET" -auto-approve
        continue-on-error: false    
      #- run: echo "::set-env name=BRANCH_NAME::${{ github.head_ref }}"
      #- run: cd infrastructure
      #- run: terraform init
      #- run: terraform workspace select $BRANCH_NAME || terraform workspace new $BRANCH_NAME
      #- run: terraform apply -var="branch_name=$BRANCH_NAME" -auto-approve
  
  build:
    runs-on: aws-${GITHUB_REF##*/}
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly-2021-02-12
          target: wasm32-unknown-unknown
          override: true
          default: true
      - run: ./scripts/init.sh
      - name: Install clippy
        run: rustup component add clippy
      - name: Run clippy
        run: cargo clippy --release -- -D warnings
      - name: Tests
        run: time cargo test --all --release --verbose --locked
      - name: Benchmarking tests
        run: cd node && cargo test --release --features runtime-benchmarks -p pallet-exchange-benchmarking -p pallet-amm -p pallet-multi-payment-benchmarking -p pallet-claims
      - name: Build release
        run: time cargo build --release --verbose
      - name: Upload release binary
        uses: actions/upload-artifact@v2
        with:
          name: hydra-dx
          path: target/release/hydra-dx
      - name: Upload release wasm
        uses: actions/upload-artifact@v2
        with:
          name: hydra_dx_runtime.wasm
          path: target/release/wbuild/hydra-dx-runtime/hydra_dx_runtime.compact.wasm

